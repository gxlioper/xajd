/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package xgxt.qtsj.action;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.zfsoft.basic.BasicAction;

import common.Globals;

import xgxt.DAO.DAO;
import xgxt.action.Base;
import xgxt.base.DealString;
import xgxt.base.Excel2Oracle;
import xgxt.daoActionLogic.StandardOperation;
import xgxt.form.CommanForm;
import xgxt.qtsj.InsureForm;
import xgxt.qtsj.InsureService;
import xgxt.qtsj.shgc.service.TbxxwhService;
import xgxt.studentInfo.service.XsxxglService;
import xgxt.utils.FormModleCommon;
import xgxt.utils.GetTime;
import xgxt.utils.String.StringUtils;

/** 
 * MyEclipse Struts
 * Creation date: 02-14-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class InsureAction extends BasicAction {
	/**
	 * 公用方法:在REQUEST中存放页面所要加载的属性
	 * @param request
	 * @param xydm
	 * @param zydm
	 * @param nj
	 * @return void
	 * @throws Exception
	 */
	public void appendProperties(HttpServletRequest request){		
		String userType = request.getSession().getAttribute("userType").toString();
		request.setAttribute("writeAble",FormModleCommon.getWriteAbleAndTitle(request)[0]);
		request.setAttribute("xqList", Base.getXqList());//学期列表
		request.setAttribute("xnList", Base.getXnndList());//学年列表		
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);
		request.setAttribute("userType", userType);//用户类型		
	}
	
	/**
	 * 生成初始页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward 
	 * */
	public ActionForward initPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CommanForm comm=(CommanForm) form;
		HttpSession session = request.getSession();
		DAO dao = DAO.getInstance();
		String userDep = session.getAttribute("userDep").toString();
		String userType = dao.getUserType(userDep);
		String xydm = comm.getXydm();
		String zydm = comm.getZydm();
		String nj = comm.getNj();
		
		if("xy".equalsIgnoreCase(userType)){
			xydm=userDep;
			comm.setXydm(xydm);
		}
		
		xydm = xydm==null ? "":xydm;
		zydm = zydm==null ? "":zydm;
		nj = nj==null ? "":nj;
		String bjKey = xydm+"!!"+zydm+"!!"+nj;
		
		request.setAttribute("njList", Base.getNjList());
		request.setAttribute("xyList", Base.getXyList());
		request.setAttribute("zyList", Base.getZyMap().get(xydm));
		request.setAttribute("bjList", Base.getBjMap().get(bjKey));
		return mapping.findForward("initpage");
	}
	
	
	/**
	 * 西昌学院投保清单生成第一个页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward 
	 * */
	public ActionForward createFirstPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CommanForm comm=(CommanForm) form;
		DAO dao = DAO.getInstance();
		List bxxzList = null;
		List bxxxList = null;
		String totalmoney = "0";
		String date = "";
		String year = "";
		String month = "";
		String day = "";
		String bjdm = comm.getBjdm();
		String bjmc = dao.getOneRs("select bjmc from view_njxyzybj where bjdm=?", new String[]{bjdm}, "bjmc");
		String xxmc = dao.getOneRs("select xxmc from dmk_xx where xxdm=?", new String[]{dao.getXxdm()}, "xxmc");
		bxxzList = dao.getList("select distinct bxxzdm,bxxzmc,bxje from bxxzb", new String[]{}, new String[]{"bxxzmc","bxje"});
		
		bxxxList = dao.getList("select rownum num,bxpzh,xm,xb,csrq from view_bxxxgropbybj where jfbj='是' and  bjdm=?", new String[]{bjdm}, new String[]{"num","bxpzh","xm","xb","csrq"});
		date = dao.getOneRs("select sysdate time from dual", new String[]{}, "time");
		totalmoney = dao.getOneRs("select sum(bxje) total from (select distinct bxxzdm,bxxzmc,bxje from bxxzb)", new String[]{}, "total");
		
		year = date.substring(0,4);
		month = date.substring(5,7);
		day = date.substring(8,10);
		
		request.setAttribute("year", year);
		request.setAttribute("month", month);
		request.setAttribute("day", day);
		request.setAttribute("bxxxList", bxxxList);
		request.setAttribute("bxxxNum", bxxxList.size());
		request.setAttribute("totalmoney", totalmoney);
		request.setAttribute("insureNum", bxxzList.size());
		request.setAttribute("bxxzList", bxxzList);
		request.setAttribute("bjmc", bjmc);
		request.setAttribute("xxmc", xxmc);
		return mapping.findForward("sucess");
	}
	
	/**
	 * 显示保险流程
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward showBxlc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String xxdm = StandardOperation.getXxdm();
		if(xxdm.equalsIgnoreCase(Globals.XXDM_NBLGXY)){
			//宁波理工学院
			return new ActionForward("/insureLogic.do?method=viewInfo&title='保险简介'",false);
		}
		return mapping.findForward("sucess");
	}
	
	/**
	 * 学生保险理赔信息统计
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	@SuppressWarnings("unchecked")
	public ActionForward insureTotalInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CommanForm comm=(CommanForm) form;
		TbxxwhService service = new TbxxwhService();
		DAO dao = DAO.getInstance();
		String nd = comm.getNd();
		List topTr = null;
		List rs = new ArrayList();
		String rsNum = "";
		String writeAble = Base.getWriteAble(request);
		String[] outputValue = new String[]{"nd","hffy","lprs","zj","lpl"};
		topTr = dao.arrayToList(outputValue, new String[]{"年度","花费费用","理赔人数","总计理赔金额","理赔率"});
		String sql = "";
		String tempSql = "select substr((sum(zj)/sum(hffy))*100,0,6)||'%' lpl,count(*)lprs,sum(hffy)hffy,sum(zj) zj,max(nd)nd ";
		List bxxzList = service.getBxxzList();
		String[] outputColumn = new String[5+bxxzList.size()];
		for(int i=0;i<outputValue.length;i++){
			outputColumn[i] = outputValue[i];
		}
		
		//组合sql语句
		sql = "SELECT nd,sum(hffy)hffy,SUM(trim(lpje)) zj " ;
		for(int i=0; i<bxxzList.size(); i++){
			HashMap< String, String> map = new HashMap<String, String>();
			map = (HashMap< String, String>)bxxzList.get(i);
			String bxxzmc = map.get("bxxzmc");
			String bm = bxxzmc.length()>11 ? bxxzmc.substring(0,10) : bxxzmc;
			sql += ",(SELECT SUM(trim(lpje)) FROM view_lpxx WHERE bxxzmc='"+bxxzmc + "')" + bm + "理赔金额 ";
			tempSql += ",max(" + bm + "理赔金额)" + bm + "理赔金额";
			outputColumn[5+i] = bm+"理赔金额";
			
			//表头
			map = new HashMap<String, String>();
			map.put("en", bxxzmc+"理赔金额");
			map.put("cn", bxxzmc+"理赔金额");
			topTr.add(map);
		}
		sql = tempSql + " from(" + sql ;
		sql += " FROM View_Lpxx GROUP BY nd,xh)";
		if(nd!=null &&! "".equalsIgnoreCase(nd)){
			sql +=" where 1=1 and nd='"+nd+"'";
		}	
		
		if ((request.getParameter("go") != null)
				&& request.getParameter("go").equalsIgnoreCase("go")) {
			rs.addAll(dao.rsToVator(sql, new String[] {}, outputColumn));
			if (rs == null) {
				rsNum = "0";
			} else {
				rsNum = String.valueOf(rs.size());
			}
		}
		
		request.setAttribute("rs", rs);
		request.setAttribute("ndList", Base.getXnndList());
		request.setAttribute("writeAble", writeAble);
		request.setAttribute("rsNum", rsNum);
		request.setAttribute("topTr", topTr);
		return mapping.findForward("totalinfo");
	}
	
	/**
	 * 学生保险理赔信息统计导出
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	@SuppressWarnings("unchecked")
	public ActionForward expDateOfLpxx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TbxxwhService service = new TbxxwhService();	
		CommanForm comm=(CommanForm) form;
		List bxxzList = service.getBxxzList();
		String nd = comm.getNd();
		String tempSql = "select substr((sum(zj)/sum(hffy))*100,0,6)||'%' lpl,count(*)lprs,sum(hffy)hffy,max(nd) nd,sum(zj)zj ";
		 //组合sql语句
		String sql =  "SELECT nd,sum(hffy)hffy,SUM(trim(lpje)) zj " ; 
		for(int i=0; i<bxxzList.size(); i++){
			HashMap< String, String> map = new HashMap<String, String>();
			map = (HashMap< String, String>)bxxzList.get(i);
			String bxxzmc = map.get("bxxzmc");
			String bm = bxxzmc.length()>11 ? bxxzmc.substring(0,10) : bxxzmc;
			sql += ",(SELECT SUM(trim(lpje)) FROM view_lpxx WHERE bxxzmc='"+bxxzmc + "')" + bm + "理赔金额 ";
			tempSql += ",max(" + bm + "理赔金额)" + bm + "理赔金额";
		}
		sql = tempSql + " from(" + sql ;
		sql += " FROM View_Lpxx GROUP BY nd,xh) ";
		if(nd!=null &&! "".equalsIgnoreCase(nd)){
			sql +=" where 1=1 and nd='"+nd+"'";
		}
		
		response.reset();
		response.setContentType("application/vnd.ms-excel");
		try {
			Excel2Oracle.exportData(sql, "view_bxlpylb", response.getOutputStream());
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}				
		return mapping.findForward("success");
	}
	
	
	/**
	 * 学生投保申请批量审核 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 * */
	public ActionForward excuteAuditing(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommanForm model = (CommanForm) form;
		InsureService service = new InsureService();
		HttpSession session = request.getSession();
		
		String yesNo = request.getParameter("yesNo");
		String pkValue = request.getParameter("pkValue");
		String userType = session.getAttribute("userType").toString();
		
		model.setUserType(userType);
		model.setYesNo(yesNo);
		model.setPkValue(pkValue);
		
		request.setAttribute("result", service.batchAuditing(model, request));//批量保存审核结果
		appendProperties(request);//增加页面属性
		request.setAttribute("tbxzdmList", service.getTbxzList());
		request.setAttribute("tips", "其他数据 - 保险信息 - 学校审核");
		request.setAttribute("tableName", "view_xsbxxx");
		request.setAttribute("realTable", "xsbxb");
		request.setAttribute("pk", "xh||nd");
		return mapping.findForward("success");
	}
	
	/**
	 * 保险管理信息发布页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward insureDataPub(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){		
		return mapping.findForward("insureDatapub");
	}
	
	/**
	 * 信息发布保存
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response 
	 * @throws Exception 
	 * */
	public ActionForward savePubInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		InsureService service = new InsureService();
		InsureForm model = new InsureForm();
		String title = DealString.toGBK(request.getParameter("infoTitle"));		
		String content = DealString.toGBK(request.getParameter("content1"));
		
		model.setTitle(title);
		model.setContent(content);
		request.setAttribute("result", service.savePubData(model, request));
		return mapping.findForward("insureDatapub");
	}
	
	/**
	 * 发布信息查看
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward viewInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		InsureService service = new InsureService();		
		String title = "保险简介";
		request.setAttribute("rs", service.getDataPubInfo(title));
		return mapping.findForward("infoContent");
	}
	
	public static ActionForward shgc_Conf(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		DAO dao = DAO.getInstance();
		String sql = "";// sql语句
		String kssj = "";
		String jssj = "";
		if ((request.getParameter("act") != null)
				&& request.getParameter("act").equalsIgnoreCase("save")) {
			kssj = request.getParameter("kssqsj");
			jssj = request.getParameter("jssqsj");
			String error="";
			if (Long.parseLong(jssj)<Long.parseLong(kssj) ){
				error="结束时间不能小于开始时间";
				request.setAttribute("error", error);
				return mapping.findForward("success");
			}
			String nowTime = dao.getOneRs(" select count(*) num from SHGC_XSBXSJ", new String[]{}, "num");
			boolean ok = false;
			if(!"0".equals(nowTime)){
				ok = StandardOperation.update("SHGC_XSBXSJ", new String[] {
						"kssqsj", "jssqsj" }, new String[] { kssj, jssj }, "1",
						"1", request);
			}else{
				ok = StandardOperation.insert("SHGC_XSBXSJ", new String[] {
						"kssqsj", "jssqsj" }, new String[] { kssj, jssj }, request);
			}
			// sql = "delete from xsfzsqkfsjb where xn=? and nd=? and xq=?";
			
			if (ok) {
				request.setAttribute("ok", "ok");
			} else {
				request.setAttribute("ok", "no");
			}
		}
		sql = "select strtodatetime(substr(kssqsj,1,8)) kssqsj1,"
				+ "substr(kssqsj,9,2) kssqsj2,"
				+ "substr(kssqsj,11,2) kssqsj3,"
				+ "substr(kssqsj,13,2) kssqsj4,"
				+ "strtodatetime(substr(jssqsj,1,8)) jssqsj1,"
				+ "substr(jssqsj,9,2) jssqsj2,"
				+ "substr(jssqsj,11,2) jssqsj3,"
				+ "substr(jssqsj,13,2) jssqsj4 from SHGC_XSBXSJ "
				+ "where rownum=1";
		String[] rst = { "kssqsj1", "kssqsj2",
				"kssqsj3", "kssqsj4", "jssqsj1", "jssqsj2", "jssqsj3",
				"jssqsj4" };
		String[] sj = dao.getOneRs(sql, new String[] {}, rst);
		if (sj == null) {
			sj = new String[rst.length];
			for (int i = 0; i < sj.length; i++) {
				sj[i] = "";
			}
		}
		for (int i = 0; i < sj.length; i++) {
			request.setAttribute(rst[i], sj[i]);
		}

		return mapping.findForward("success");
	}
	
	/**
	 * 投保信息维护
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward tbxxwh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		InsureForm model = (InsureForm) form;
		InsureService service = new InsureService();
		String type = request.getParameter("type");
		String go = request.getParameter("go");
		
		if("del".equalsIgnoreCase(type)){//删除数据
			this.deleteOperation(request, "xsbxb");
			go = "go";//查询参数
		}
		
		if("go".equalsIgnoreCase(go)){//查询
			String[] outputColumn = {"pkValue", "nd", "xh","xm", "bxgsmc", "bxxzmc", 
					                 "bxnx", "bf", "tbsj", "jfbj", "tbbj", "bxpzh", "sfyby"};			
			selectPageDataByPagination(request, model, "xsbxb", "view_xsbxxx", outputColumn);
			
		}		
		appendProperties(request);//加载下拉列表数据
		if("del".equalsIgnoreCase(type)){
			request.setAttribute("writeAble", "yes");
		}
		request.setAttribute("tbxzdmList", service.getTbxzList());//投保险种列表
		request.setAttribute("bxgsdmList", service.getBxgsList());//保险公司列表
		return mapping.findForward("success");
	}
	
	/**
	 * 投保信息增加
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward tbxxAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		XsxxglService xsxxService = new XsxxglService();
		InsureService service = new InsureService();
		String xh = request.getParameter("xh");
		String type = request.getParameter("type");
		String xxdm = StandardOperation.getXxdm();
		
		if("add".equalsIgnoreCase(type)){
			this.insertOperation(request, "xsbxb");
		}
		
		HashMap<String, String> stu =  xsxxService.selectStuinfo(xh);
		stu.put("save_xh", stu.get("xh"));
		if(!"add".equalsIgnoreCase(type)){
			stu.put("save_nd", Base.currNd);
		}
		request.setAttribute("rs",stu);
		request.setAttribute("tbxzdmList", service.getTbxzList());//投保险种列表
		request.setAttribute("bxgsdmList", service.getBxgsList());//保险公司列表
		
		//广东女子职业技术学院
		if (xxdm.equalsIgnoreCase(Globals.XXDM_GDNZZYJSXY)) {				
			request.setAttribute("bxdcList", service.getBxdcList());
		}
		appendProperties(request);//加载下拉列表数据
		return mapping.findForward("tbxxAdd");
	}
	
	/**
	 * 投保信息修改
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward tbxxModi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		InsureService service = new InsureService();
		String type = request.getParameter("type");
		String xxdm = StandardOperation.getXxdm();
		String pkValue = request.getParameter("pkValue");
		
		if(StringUtils.isNotNull(type)){
			this.selectPageDataByOne(request, "xsbxb", "view_xsbxxx", pkValue);
		}
		if("save".equalsIgnoreCase(type)){
			this.updateOperation(request, "xsbxb");
		}
		
		request.setAttribute("tbxzdmList", service.getTbxzList());//投保险种列表
		request.setAttribute("bxgsdmList", service.getBxgsList());//保险公司列表
		
		//广东女子职业技术学院
		if (xxdm.equalsIgnoreCase(Globals.XXDM_GDNZZYJSXY)) {				
			request.setAttribute("bxdcList", service.getBxdcList());
		}
		appendProperties(request);//加载下拉列表数据
		request.setAttribute("type", type);
		return mapping.findForward("tbxxModi");
	}
	
	/**
	 * 投保信息导出
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 * */
	public ActionForward tbxxExp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		this.expPageData(request, response, "xsbxb", "view_xsbxxx", null);
		return mapping.findForward("");
	}
	


	
	/**
	 * 理赔项目代码维护
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 * @author quph
	 */
	public ActionForward lpdmwh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		String tableName = "bxxx_lpxm";
		String doType = request.getParameter("doType");
		String[] colList = new String[] {"pkValue","dm","mc"};
		
		
		if (!Base.isNull(doType) && "query".equals(doType)) {
			this.selectPageDataByPagination(request, form, tableName, tableName, colList);
		}
		
		if (!Base.isNull(doType) && "del".equals(doType)) {
			this.deleteOperation(request, tableName);
		}
		
		if (!Base.isNull(doType) && "expData".equals(doType)) {
			this.expPageData(request, response, tableName, tableName, colList);
			return mapping.findForward("");
		}
		
		request.setAttribute("realTable", tableName);
		request.setAttribute("tname", "lpxm");
		request.setAttribute("path", "bxxx_dmwh.do");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("lpdmwh");
	}
	
	
	
	/**
	 * 材料项目代码维护
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 * @author quph
	 */
	public ActionForward cldmwh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		InsureService service = new InsureService();
		
		String tableName = "bxxx_clxm";
		String viewName = "view_bxxx_clxm";
		String doType = request.getParameter("doType");
		String[] colList = new String[] {"pkValue","lpxmmc","dm","mc"};
		
		
		if (!Base.isNull(doType) && "query".equals(doType)) {
			this.selectPageDataByPagination(request, form, tableName, viewName, colList);
		}
		
		if (!Base.isNull(doType) && "del".equals(doType)) {
			this.deleteOperation(request, tableName);
		}
		
		if (!Base.isNull(doType) && "expData".equals(doType)) {
			this.expPageData(request, response, tableName, viewName, colList);
			return mapping.findForward("");
		}
		
		request.setAttribute("realTable", tableName);
		request.setAttribute("lpxmList", service.getLpxmList());
		request.setAttribute("tname", "clxm");
		request.setAttribute("path", "bxxx_dmwh.do");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("cldmwh");
	}
	
	
	
	/**
	 * 理赔项目维护
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 * @author quph
	 */
	public ActionForward lpxmUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		String tableName = "bxxx_lpxm";
		String doType = request.getParameter("doType");
		String pkValue = request.getParameter("pk");
		
		this.selectPageDataByOne(request, tableName, tableName, pkValue);
		
		if (!Base.isNull(doType) && "save".equals(doType)) {
			this.insertOperation(request, tableName);
		}
		
		
		if (!Base.isNull(doType) && "modify".equals(doType)) {
			this.updateOperation(request, tableName);
		}
		
		request.setAttribute("doType", doType);
		request.setAttribute("path", "bxxx_dmwh.do");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("lpxmUpdate");
	}
	
	
	
	/**
	 * 材料项目维护
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 * @author quph
	 */
	public ActionForward clxmUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		InsureService service = new InsureService();
		
		String tableName = "bxxx_clxm";
		String viewName = "view_bxxx_clxm";
		String doType = request.getParameter("doType");
		String pkValue = request.getParameter("pk");
		
		this.selectPageDataByOne(request, tableName, viewName, pkValue);
		
		if (!Base.isNull(doType) && "save".equals(doType)) {
			this.insertOperation(request, tableName);
		}
		
		
		if (!Base.isNull(doType) && "modify".equals(doType)) {
			this.updateOperation(request, tableName);
		}
		
		request.setAttribute("doType", doType);
		request.setAttribute("lpxmList", service.getLpxmList());
		request.setAttribute("path", "bxxx_dmwh.do");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("clxmUpdate");
	}



	
	/**
	 * 理赔申请
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 * @author quph
	 */
	public ActionForward lpsqUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		HttpSession session = request.getSession();
		
		String userName = (String) session.getAttribute("userName");
		String userType = (String) session.getAttribute("userType");
		
		InsureService service = new InsureService();
		
		String tableName = "bxxx_lpsq";
		String viewName = "view_bxxx_lpsq";
		String doType = request.getParameter("doType");
		
		String[] lpcl = request.getParameterValues("save_lpcl");
		String xh = request.getParameter("save_xh");
		String lpxm = request.getParameter("save_lpxm");
		String jtsm = request.getParameter("save_jtsm");
		String sqsj = request.getParameter("save_sqsj");
		
		HashMap<String, String> tableMap = new HashMap<String, String>();
		tableMap.put("tableName", tableName);
		
		if ("stu".equals(userType) && Base.isNull(doType)) {
			request.setAttribute("rs", service.getStuInfo(userName));
		}
		
		if (!Base.isNull(doType) && "save".equals(doType)) {
			
			HashMap<String, String> valueMap = new HashMap<String, String>();
			
			valueMap.put("xh", xh);
			valueMap.put("lpxm", lpxm);
			valueMap.put("sqsj", sqsj);
			valueMap.put("jtsm", jtsm);
			valueMap.put("lpcl", Arrays.toString(lpcl));
			
			this.insertOperation(request, valueMap, tableMap);
			this.selectPageDataByOne(request, tableName, viewName, xh+sqsj);
		}
		
		request.setAttribute("nowTime", GetTime.getSystemTime().replace("-", ""));
		request.setAttribute("lpxmList", service.getLpxmList());
		request.setAttribute("path", "bxxx_lpsq.do");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("lpsqUpdate");
	}
	
	
	
	
	/**
	 * 理赔审核
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 * @author quph
	 */
	public ActionForward lpsh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		HttpSession session = request.getSession();
		
		String userName = (String) session.getAttribute("userName");
		String userType = (String) session.getAttribute("userType");
		String userDep = (String) session.getAttribute("userDep");
		
		InsureService service = new InsureService();
		CommanForm commanForm = (CommanForm) form;
		
		String tableName = "bxxx_lpsq";
		String viewName = "view_bxxx_lpsq";
		String[] colList = new String[] {"pkValue","xh","xm","nj","xymc","bjmc","lpxmmc","shjg"};
		String doType = request.getParameter("doType");
		String shjg = request.getParameter("shjg");
		
		
		if ("xy".equals(userType)) {
			commanForm.setQueryequals_xydm(userDep);
		} else if("stu".equals(userType)) {
			request.setAttribute("errMsg", "对不起,您无权访问此页!");
			return new ActionForward("/errMsg.do",false);
		}
		
		if (!Base.isNull(doType) && "query".equals(doType)) {
			this.selectPageDataByPagination(request, form, tableName, viewName, colList);
		}
		
		if (!Base.isNull(doType) && "sh".equals(doType)) {
			HashMap<String, String> valueMap = new HashMap<String, String>();
			valueMap.put("lpsj", GetTime.getSystemTime().replace("-", ""));
			valueMap.put("shr", userName);
			
			if ("不通过".equals(shjg)) {
				valueMap.put("shjg", "不通过");
			} else {
				valueMap.put("lpje", request.getParameter("lpje"));
				valueMap.put("shjg", "通过");
				
			}
			this.auditingBatchOperation(request,getValueArrayMap(request, 
					PRIFIX_PRIMARY_KEY), valueMap, tableName);
		}
		
		
		request.setAttribute("lpxmList", service.getLpxmList());
		request.setAttribute("path", "bxxx_lpsh.do");
		FormModleCommon.commonRequestSet(request);
		FormModleCommon.setNjXyZyBjList(request);
		return mapping.findForward("lpsh");
	}
	
	
	
	
	/**
	 * 理赔信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 * @author quph
	 */
	public ActionForward lpInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		InsureService service = new InsureService();
		
		String tableName = "bxxx_lpsq";
		String viewName = "view_bxxx_lpsq";
		String pkValue = request.getParameter("pk");
		String doType = request.getParameter("doType");
		
		String xh = request.getParameter("save_xh");
		String lpxm = request.getParameter("save_lpxm");
		String jtsm = request.getParameter("save_jtsm");
		String sqsj = request.getParameter("save_sqsj");
		String[] lpcl = request.getParameterValues("save_lpcl");
		
		this.selectPageDataByOne(request, tableName, viewName, pkValue);
		
		if (!Base.isNull(doType) && "shOne".equals(doType)) {
			this.updateOperation(request, tableName);
		}
		
		if  (!Base.isNull(doType) && "modify".equals(doType)) {
			HashMap<String, String> valueMap = new HashMap<String, String>();
			
			valueMap.put("xh", xh);
			valueMap.put("lpxm", lpxm);
			valueMap.put("sqsj", sqsj);
			valueMap.put("jtsm", jtsm);
			valueMap.put("lpcl", Arrays.toString(lpcl));
			
			HashMap<String, String> tableMap = new HashMap<String, String>();
			tableMap.put("tableName", tableName);
			
			this.updateOperation(request, valueMap, tableMap);
		}
		
		request.setAttribute("nowTime", GetTime.getSystemTime().replace("-", ""));
		request.setAttribute("shztList", service.getList(3));
		request.setAttribute("lpxmList", service.getLpxmList());
		request.setAttribute("doType", doType);
		request.setAttribute("pkValue", pkValue);
		request.setAttribute("path", "bxxx_lpsq.do");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("lpInfo");
	}
	
	
	
	
	
	/**
	 * 理赔结果
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 * @author quph
	 */
	public ActionForward lpjg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		HttpSession session = request.getSession();
		
		String userName = (String) session.getAttribute("userName");
		String userType = (String) session.getAttribute("userType");
		String userDep = (String) session.getAttribute("userDep");
		
		InsureService service = new InsureService();
		CommanForm commanForm = (CommanForm) form;
		
		String tableName = "bxxx_lpsq";
		String viewName = "view_bxxx_lpsq";
		String[] colList = new String[] {"pkValue","xh","xm","nj","xymc","bjmc",
				"lpxmmc","lpje","shjg"};
		String doType = request.getParameter("doType");
		
		if ("xy".equals(userType)) {
			commanForm.setQueryequals_xydm(userDep);
		} else if ("stu".equals(userType)) {
			commanForm.setQueryequals_xydm(userDep);
			commanForm.setQuerylike_xh(userName);
		}
		
		
		if (!Base.isNull(doType) && "query".equals(doType)) {
			this.selectPageDataByPagination(request, form, tableName, viewName, colList);
		}
		
		if (!Base.isNull(doType) && "del".equals(doType)) {
			this.deleteOperation(request, tableName);
		}
		
		if (!Base.isNull(doType) && "expData".equals(doType)) {
			this.expPageData(request, response, tableName, viewName,
					new String[] { "xh", "xm", "nj", "xymc", "bjmc", "lpxm",
							"lpxmmc", "shjg" });
			return mapping.findForward("");
		}
		
		request.setAttribute("realTable", tableName);
		request.setAttribute("lpxmList", service.getLpxmList());
		request.setAttribute("shztList", service.getList(3));
		request.setAttribute("path", "bxxx_lpjg.do");
		FormModleCommon.commonRequestSet(request);
		FormModleCommon.setNjXyZyBjList(request);
		return mapping.findForward("lpjg");
	}
	
}