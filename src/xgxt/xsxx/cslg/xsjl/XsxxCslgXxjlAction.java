/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package xgxt.xsxx.cslg.xsjl;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jxl.write.WritableWorkbook;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import xgxt.action.Base;
import xgxt.action.BaseAction;
import xgxt.studentInfo.service.XsxxglService;
import xgxt.utils.ExcelMethods;
import xgxt.utils.FormModleCommon;

/** 
 * MyEclipse Struts
 * Creation date: 11-22-2010
 * 淮海工学院
 * author 裘力俊
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class XsxxCslgXxjlAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * method xxjlCx
	 * 学习经历查询
	 */
	public ActionForward xxjlCx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		XsxxCslgXsjlService service=new XsxxCslgXsjlService();
		XsxxCslgXsjlForm xsjlForm=(XsxxCslgXsjlForm)form;
		
		String viewName="view_xsxx_cslg_xxjlb";
		String tableName="xsxxb";
		String doType=request.getParameter("doType");
		if("del".equalsIgnoreCase(doType)){
			service.deleteXxjl(xsjlForm);
			doType="qry";
		}
		
		if("qry".equalsIgnoreCase(doType)){
			String[] outputColumn={"pkValue","xh","xm","nj","xymc","zymc","bjmc"};
			this.selectPageDataByPagination(request, form, tableName, viewName, outputColumn);
		}
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);
		request.setAttribute("path", "xsxxCslgXsjl.do?method=xxjlCx");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("xxjlCx");
	}
	
	/**
	 * 
	 */
	public ActionForward xxjlWh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session=request.getSession();
		HashMap<String,String>hashMap=new HashMap<String,String>();
		XsxxglService xsxxglService=new XsxxglService();
		XsxxCslgXsjlService service=new XsxxCslgXsjlService();
		XsxxCslgXsjlForm xsjlForm=(XsxxCslgXsjlForm)form;
		
		String userType = session.getAttribute("userType").toString();
		String userName = session.getAttribute("userName").toString();
		if("stu".equalsIgnoreCase(userType)){
			xsjlForm.setXh(userName);
		}
	
		if(request.getAttribute("rs")!=null){
			hashMap=(HashMap<String,String>)request.getAttribute("rs");
		}
	
		String doType=request.getParameter("doType");
	
		if("save".equalsIgnoreCase(doType)){
			//批量保存
			service.delXxjl(xsjlForm);
			service.plSave(request, xsjlForm);
		}
		
		if(!"".equalsIgnoreCase(xsjlForm.getXh())){
			hashMap=xsxxglService.selectStuinfo(xsjlForm.getXh());
		}
		

		String nd=Base.currNd;
		String xn=Base.currXn;
		String xq=Base.currXq;
		hashMap.put("xn", xn);
		hashMap.put("xqmc",service.getXqmc(xq) );
		hashMap.put("nd", nd);
		request.setAttribute("doType", doType);
		request.setAttribute("rs", hashMap);
		request.setAttribute("pkValue", xsjlForm.getXh());
		request.setAttribute("path", "xsxxCslgXsjl.do?method=xxjlWh&doType=add");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("xxjlWh");
	}
	
	/**
	 * xxjlOne
	 * 学习经历单个显示
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward xxjlOne(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HashMap<String,String>hashMap=new HashMap<String,String>();
		XsxxglService xsxxglService=new XsxxglService();
		XsxxCslgXsjlService service=new XsxxCslgXsjlService();
		
		String pkValue=request.getParameter("pkValue");
		String doType=request.getParameter("doType");
		String nd=Base.currNd;
		String xn=Base.currXn;
		String xq=Base.currXq;
		
		
		hashMap=xsxxglService.selectStuinfo(pkValue);
		hashMap.put("xn", xn);
		hashMap.put("xqmc",service.getXqmc(xq) );
		hashMap.put("nd", nd);
	
		//学习经历
		request.setAttribute("doType", doType);
		request.setAttribute("pkValue", pkValue);
		request.setAttribute("rs", hashMap);
		request.setAttribute("xxjl", service.getXxjlXx(pkValue));
		request.setAttribute("path", "xsxxCslgXsjl.do?method=xxjlWh&doType=add");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("xxjlWh");
	}
	
	/**
	 * xxjlOne
	 * 学习经历单个显示
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward xxjlUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HashMap<String,String>hashMap=new HashMap<String,String>();
		XsxxglService xsxxglService=new XsxxglService();
		XsxxCslgXsjlService service=new XsxxCslgXsjlService();
		
		String pkValue=request.getParameter("pkValue");
		String doType=request.getParameter("doType");
		String nd=Base.currNd;
		String xn=Base.currXn;
		String xq=Base.currXq;
		
		
		hashMap=xsxxglService.selectStuinfo(pkValue);
		hashMap.put("xn", xn);
		hashMap.put("xqmc",service.getXqmc(xq) );
		hashMap.put("nd", nd);
	
		//学习经历
		request.setAttribute("doType", doType);
		request.setAttribute("pkValue", pkValue);
		request.setAttribute("rs", hashMap);
		request.setAttribute("xxjl", service.getXxjlXx(pkValue));
		request.setAttribute("path", "xsxxCslgXsjl.do?method=xxjlWh&doType=add");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("xxjlWh");
	}
	
	/**
	 * 数据导出
	 * method expDate
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException 
	 * @throws NoSuchMethodException 
	 * @throws InvocationTargetException 
	 * @throws IllegalAccessException 
	 * @throws SecurityException 
	 * @throws IllegalArgumentException 
	 */
	
	
	public ActionForward expDate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		
		XsxxCslgXsjlForm xsjlForm=(XsxxCslgXsjlForm)form;
		XsxxCslgXsjlService service=new XsxxCslgXsjlService();
		HttpSession session=request.getSession();
		

		xsjlForm.setUserName(session.getAttribute("userName").toString());
		xsjlForm.setUserDep(session.getAttribute("userDep").toString());
		xsjlForm.setUserType(session.getAttribute("userType").toString());
		xsjlForm.setIsBzr(session.getAttribute("isBzr").toString());
		xsjlForm.setIsFdy(session.getAttribute("isFdy").toString());
		String modelPath = servlet.getServletContext().getRealPath("")+"/print/xsxx/cslg_xxjl.xls";
		response.reset();
		response.setContentType("application/vnd.ms-excel");
		WritableWorkbook wwb = ExcelMethods.getWritableWorkbook(new File(
				modelPath), response.getOutputStream());
		service.expData(xsjlForm, request, wwb);
		
		return mapping.findForward("success");
	}
}