/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package xgxt.xslx.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import xgxt.DAO.DAO;
import xgxt.action.Base;
import xgxt.base.DealString;
import xgxt.base.Excel2Oracle;
import xgxt.daoActionLogic.StandardOperation;
import xgxt.utils.CheckPower;

/** 
 * MyEclipse Struts
 * Creation date: 11-06-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class XslxOperationAction extends Action {
	/**
	 * 系党支部书记分配系
	 * */
	public static ActionForward dzbsjInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception{
		XslxForm xslx = (XslxForm)form;
		HttpSession session = request.getSession();
		DAO dao = DAO.getInstance();
		List rs = null;
		String tableName = "view_xdzsjxxb";
		String sql = "";
		boolean flag = false;
		String doType = request.getParameter("doType");
		String writeAble = CheckPower.checkUsrPageAccessPower(session.getAttribute("userOnLine").toString(), session.getAttribute("userName").toString(), "xdzsj.do") ? "yes" :"no";
		request.setAttribute("writeAble", writeAble);
		
		String dzsxm = xslx.getDzsxm();
		String xydm = xslx.getXydm();
		
		StringBuffer query = new StringBuffer(" where 1=1");
		query.append(dzsxm == null || dzsxm.trim().length() < 1 ? "": " and xm= '" + dzsxm.trim() + "'");
		query.append(xydm == null || xydm.trim().length() < 1 ? "": " and xydm = '" + xydm.trim() + "'");
		
		sql = "select rownum 行号,xm,xymc from " + tableName + query.toString();
		
		if (request.getParameter("go") != null&& request.getParameter("go").equalsIgnoreCase("go")) {
			String[] title_en = {"行号","xm","xymc"};
			String[] title_cn = dao.getColumnNameCN(title_en,tableName);
			List<HashMap<String, String>> topTr = new ArrayList<HashMap<String, String>>();
			topTr = dao.arrayToList(title_en, title_cn);
			rs=dao.rsToVator(sql, new String[]{}, title_en);
			if (rs != null) {
				int rsNum = rs.size();
				request.setAttribute("rsNum", rsNum);
			}
			request.setAttribute("topTr", topTr);
		}
		
		if(doType!=null && "del".equalsIgnoreCase(doType)){
			dzsxm = DealString.toGBK((request.getParameter("xm")==null || "".equalsIgnoreCase(request.getParameter("xm"))? "" : request.getParameter("xm").trim()));
			flag = StandardOperation.delete("xdzsjxxb", "xm", dzsxm, request);	
			request.setAttribute("result", flag);
		}
		
		if(doType!=null && "view".equalsIgnoreCase(doType)){
			dzsxm = DealString.toGBK((request.getParameter("xm")==null || "".equalsIgnoreCase(request.getParameter("xm"))? "" : request.getParameter("xm").trim()));
			HashMap<String, String> map = new HashMap<String, String>();
			map = dao.getMap("select xm dzsxm,xydm from " + tableName + " where xm=?",new String[]{dzsxm}, new String[]{"dzsxm","xydm"});
			
			request.setAttribute("xyList", Base.getXyList());
			request.setAttribute("rs", map);
			return mapping.findForward("saveSuccess");
		}
		
		if(doType!=null && "save".equalsIgnoreCase(doType)){
			String xm= DealString.toGBK(xslx.getDzsxm());
			xydm = xslx.getXydm();
			sql = "select count(*) num from xdzsjxxb where xm=?" ;
			int num = Integer.parseInt(dao.getOneRs(sql, new String[]{xm}, "num"));
			if(num>0){
				//update
				flag = StandardOperation.update("xdzsjxxb", new String[]{"xydm"}, new String[]{xydm}, "xm", xm, request);
			}else{
				//insert
				flag = StandardOperation.insert("xdzsjxxb", new String[]{"xm","xydm"}, new String[]{xm,xydm}, request);
			}
			
			request.setAttribute("rs", new HashMap<String, String>());
			request.setAttribute("xyList", Base.getXyList());
			request.setAttribute("result", flag);
			return mapping.findForward("saveSuccess");
		}
		
		request.setAttribute("rs", rs);		
		request.setAttribute("xyList", Base.getXyList());
		return mapping.findForward("success");
	}
	
	/** 
	 * Method bybjfpInfo 分配毕业班级
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 */	
	public static ActionForward bybjfpInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception{
		XslxForm xslx = (XslxForm)form;
		HttpSession session = request.getSession();
		String userType = session.getAttribute("userType").toString();
		String userDep = session.getAttribute("userDep").toString();
		String doType = request.getParameter("doType");
		String writeAble = Base.getWriteAble(request);
		List topTr = null;
		int rsNum = 0;
		String sql = "";
		DAO dao = DAO.getInstance();
		List rs = null;
		boolean flag = false;
		
		String xydm = xslx.getXydm();
		String zydm = xslx.getZydm();
		String bjdm = xslx.getBjdm();
		String nj = xslx.getNj();
		
		if(userType!=null && "xy".equalsIgnoreCase(userType)){
			xydm = userDep;
			xslx.setXydm(xydm);
		}	
		
		xydm = xydm == null ? "" : xydm;
		zydm = zydm == null ? "" : zydm;
		nj = nj == null ? "" : nj;
		String bjKey = xydm + "!!" + zydm + "!!" + nj;
		
		StringBuffer sb = new StringBuffer(" where 1=1 ");
		sb.append(xydm==null || "".equalsIgnoreCase(xydm) ? "" : " and a.xydm='" + xydm + "'");
		sb.append(zydm==null || "".equalsIgnoreCase(zydm) ? "" : " and a.zydm ='" + zydm + "'");
		sb.append(bjdm==null || "".equalsIgnoreCase(bjdm) ? "" : " and a.bjdm ='" + bjdm + "'");
		sb.append(nj==null || "".equalsIgnoreCase(nj) ? "" : " and a.nj ='" + nj + "'");
		
		if (request.getParameter("go") != null&& request.getParameter("go").equalsIgnoreCase("go")) {
			String[] inputEN = {"bjdm","bjdm","bjmc"};
			String[] inputCN = dao.getColumnNameCN(inputEN, "view_njxyzybj");
			topTr = dao.arrayToList(inputEN, inputCN);			
			sql = "select a.bjdm,a.bjdm,a.bjmc from view_njxyzybj a " + sb.toString() + " and not exists(select 1 from view_bybbj b where a.bjdm=b.bjdm)";
			rs = dao.rsToVator(sql, new String[]{}, inputEN);
			
			if(rs!=null && rs.size()>0){
				rsNum = rs.size();
			}
			
			request.setAttribute("rsNum", rsNum);
			request.setAttribute("topTr", topTr);
		}
		
		if(doType!=null && "save".equalsIgnoreCase(doType)){
			String pk = request.getParameter("pk");
			String[] pkValue = pk.split("!!");
			for(int i=1; i<pkValue.length; i++){
				sql = "insert into bybbjdmb(bjdm,bjmc)(select bjdm,bjmc from view_njxyzybj where bjdm='"+pkValue[i]+"')";
				flag = StandardOperation.update("bybbjdmb", sql, request);
			}
			request.setAttribute("result", flag);
		}
		
		request.setAttribute("rs", rs);
		request.setAttribute("writeAble", writeAble);
		request.setAttribute("xyList", Base.getXyList());
		request.setAttribute("zyList", Base.getZyMap().get(xydm));
		request.setAttribute("bjList", Base.getBjMap().get(bjKey) ==null ? new ArrayList() :  Base.getBjMap().get(bjKey));
		request.setAttribute("njList", Base.getNjList());
		return mapping.findForward("success");
	}
		
	/** 
	 * Method SearchInfo 离校清单查询
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 */
	public static ActionForward SearchInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		DAO dao = DAO.getInstance();
		XslxDao lxDao = new XslxDao();
		XslxForm xslx = (XslxForm)form;
		HttpSession session = request.getSession();
		String userType= session.getAttribute("userType").toString();		
		String userDep = session.getAttribute("userDep").toString();
		String userName = session.getAttribute("userName").toString();		
		Vector<String[]> rs = new Vector<String[]>();
		String writeAble = Base.getWriteAble(request);
		String tableName="view_xslxxx";	
		String sql="";
		String yhbm = "";
		
		String xydm=xslx.getXydm();
		String zydm=xslx.getZydm();
		String bjdm=xslx.getBjdm();
		String nj=xslx.getNj();
		String xh=xslx.getXh();
		String xm=DealString.toGBK(xslx.getXm());
		String shdw = DealString.toGBK(xslx.getShdw());
		String shjg = DealString.toGBK(xslx.getShjg());
		
		//学院用户登录只显示所属学院的信息
		if("xy".equalsIgnoreCase(userType)){
			xydm=userDep;
			xslx.setXydm(xydm);
		}
		xslx.setXm(xm);				
		yhbm=dao.getOneRs("select bmmc from zxbz_xxbmdm where bmdm=(select szbm from yhb where yhm=?)", new String[]{userName},"bmmc");
		
		String zgh=dao.getOneRs("select zgh from view_fdybbj where zgh=?", new String[]{userName},"zgh");
		if(!"".equalsIgnoreCase(zgh)){
			yhbm="班主任";
		}
		if("班主任".equalsIgnoreCase(yhbm)){
			xslx.setShdw("bzryj");
			xydm=userDep;
			xslx.setXydm(xydm);
		}else if("系党总支书记".equalsIgnoreCase(yhbm)){		
			xslx.setShdw("xdzsyj");
			sql = "select xydm from xdzsjxxb where xm=?";
			userName = session.getAttribute("userName").toString();
			userDep = dao.getOneRs(sql, new String[]{userName}, "xydm");
			xydm=userDep;
			xslx.setXydm(xydm);
		}else if("医务室".equalsIgnoreCase(yhbm)){
			xslx.setShdw("ywsyj");	
		}else if("图书馆".equalsIgnoreCase(yhbm)){
			xslx.setShdw("tsgyj");
		}else if("财务处".equalsIgnoreCase(yhbm)){
			xslx.setShdw("cwcyj");
		}else if("滨江后勤公司".equalsIgnoreCase(yhbm)){
			xslx.setShdw("sqglbyj");
		}else if("教务处".equalsIgnoreCase(yhbm)){
			xslx.setShdw("jwcyj");
		}else if("学生工作部".equalsIgnoreCase(yhbm)){//
			xslx.setShdw("xscyj");
		}	
		
		xslx.setShjg(shjg);
		
		StringBuffer query = new StringBuffer(" where 1=1");
		query.append(xh == null || xh.trim().length() < 1 ? "": " and xh like '%" + xh.trim() + "%'");
		query.append(xm == null || xm.trim().length() < 1 ? "": " and xm like '%" + xm.trim() + "%'");
		query.append(nj == null || nj.trim().length() < 1 ? "": " and nj = '" + nj.trim() + "'");
		query.append(bjdm == null || bjdm.trim().length() < 1 ? "": " and bjdm= '" + bjdm.trim() + "'");
		query.append(zydm == null || zydm.trim().length() < 1 ? "": " and zydm = '" + zydm.trim() + "'");
		query.append(xydm == null || xydm.trim().length() < 1 ? "": " and xydm = '" + xydm.trim() + "'");
		//选择了相应的审核单位和审核结果
		query.append((shdw!=null && !"".equalsIgnoreCase(shdw) && shjg!=null && !"".equalsIgnoreCase(shjg)) ? " and " + shdw + "='" + shjg + "' " : "" );
		//全部的审核单位＋审核结果
		query.append((shdw == null || shdw.equalsIgnoreCase("")) 
				&& (shjg!=null && !"".equalsIgnoreCase(shjg))  
				?  
						" and bzryj='" + shjg + "' and xdzsyj='" + shjg + "' and ywsyj='" + shjg +  
						"' and tsgyj='" + shjg + "' and cwcyj='" + shjg + "' and jwcyj='" + shjg + 
						"' and xscyj='" + shjg + "' and sqglbyj='" + shjg + "'"  
				: "");
		
		sql="select (case when nvl(a.xscyj,'未审核')='通过' then 'green' else '#FFFFFF' end) bgcolor,a.* from "+tableName+" a"+query.toString() + " and exists(select 1 from view_bybbj  b where a.bjdm=b.bjdm) order by a.xh";	
		
		if (request.getParameter("go") != null&& request.getParameter("go").equalsIgnoreCase("go")) {
			String[] title_en = { "xh", "xm", "nj", "bjmc", "xymc", "bzryj","xdzsyj","ywsyj","tsgyj","cwcyj","sqglbyj","xscyj","jwcyj"};
			String[] title_cn = dao.getColumnNameCN(title_en,tableName);
			List<HashMap<String, String>> topTr = new ArrayList<HashMap<String, String>>();
			for (int i = 0; i < title_en.length; i++) {
				HashMap<String, String> temmap = new HashMap<String, String>();
				temmap.put("en", title_en[i]);
				temmap.put("cn", title_cn[i]);
				topTr.add(temmap);
			}
			title_en=new String[]{"bgcolor","xh", "xm", "nj", "bjmc", "xymc", "bzryj","xdzsyj","ywsyj","tsgyj","cwcyj","sqglbyj","xscyj","jwcyj"};
			rs.addAll(dao.rsToVator(sql, new String[]{}, title_en));
			if (rs != null) {
				int rsNum = rs.size();
				request.setAttribute("rsNum", rsNum);
			}
			request.setAttribute("topTr", topTr);			
		}		
		
		request.setAttribute("rs", rs);
		request.setAttribute("writeAble", writeAble);
		request.setAttribute("njList", dao.getNjList());
		if(yhbm!=null && "系党总支书记".equalsIgnoreCase(yhbm)){				
			request.setAttribute("njList", dao.getNjList());
			request.setAttribute("xyList", lxDao.getXyListByXydm(userDep));
			request.setAttribute("zyList", dao.getZyList(userDep));
			request.setAttribute("bjList", lxDao.getBjListByXydm(userDep));
		}else if(yhbm!=null && "班主任".equalsIgnoreCase(yhbm)){
			request.setAttribute("xyList", lxDao.getXyListByXydm(xydm));
			request.setAttribute("bjList", lxDao.getBjListByFdy(userName));
		}else{
			request.setAttribute("xyList", Base.getXyList());
			request.setAttribute("zyList", dao.getZyList(xydm));
			request.setAttribute("bjList", lxDao.getBjList(xydm, zydm, nj));
		}		
		return mapping.findForward("success");
	}
	
	/** 
	 * Method LeaveCheck 离校审核查询
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public static ActionForward LeaveCheck(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)throws Exception{
		DAO dao = DAO.getInstance();
		XslxForm xslx=(XslxForm)form;
		HttpSession session = request.getSession();	
		String userType= session.getAttribute("userType").toString();
		String userDep = session.getAttribute("userDep").toString();
		String userName = session.getAttribute("userName").toString();
		String doType = request.getParameter("doType");
		String writeAble=CheckPower.checkUsrPower(userName, "leave_check.do")? "yes" : "no";
		boolean falg=false;
		XslxDao lxDao = new XslxDao();
		
		String xydm=xslx.getXydm();
		String zydm=xslx.getZydm();
		String bjdm=xslx.getBjdm();		
		String nj=xslx.getNj();		
		String xh = xslx.getXh();
		String condition_str="";//操作字段
		String condition_zx=" and (b.xscyj is null or b.xscyj<>'通过') ";//在校生条件
		String condition_lx=" and b.xscyj='通过'";//批准离校条件
		
		String yhbm=dao.getOneRs("select bmmc from zxbz_xxbmdm where bmdm=(select szbm from yhb where yhm=?)", new String[]{userName},"bmmc");
		
		if("xy".equalsIgnoreCase(userType)){
			xydm=userDep;
			xslx.setXydm(xydm);
		}
		//判断用户是否是班主任
		String zgh=dao.getOneRs("select zgh from view_fdybbj where zgh=?", new String[]{userName},"zgh");
		if(!"".equalsIgnoreCase(zgh)){
			yhbm="班主任";
		}
		if("班主任".equalsIgnoreCase(yhbm)){
			xydm=userDep;
			xslx.setXydm(xydm);
			condition_str="bzryj";
			condition_zx=" and (b.bzryj is null or b.bzryj<>'通过') ";
			condition_lx=" and b.bzryj='通过' ";
		}else if("系党总支书记".equalsIgnoreCase(yhbm)){		
			condition_str="xdzsyj";
			condition_zx=" and (b.xdzsyj is null or b.xdzsyj<>'通过') ";
			condition_lx=" and b.xdzsyj='通过' ";
		}else if("医务室".equalsIgnoreCase(yhbm)){
			condition_str="ywsyj";
			condition_zx=" and (b.ywsyj is null or b.ywsyj<>'通过')";
			condition_lx=" and b.ywsyj='通过' ";
		}else if("图书馆".equalsIgnoreCase(yhbm)){
			condition_str="tsgyj";
			condition_zx=" and (b.tsgyj is null or b.tsgyj<>'通过') ";
			condition_lx=" and b.tsgyj='通过'";
		}else if("财务处".equalsIgnoreCase(yhbm)){
			condition_str="cwcyj";
			condition_zx=" and (b.cwcyj is null or b.cwcyj<>'通过')";
			condition_lx=" and b.cwcyj='通过'";
		}else if("滨江后勤公司".equalsIgnoreCase(yhbm)){
			condition_str="sqglbyj";
			condition_zx=" and (b.cwcyj is null or b.sqglbyj<>'通过')";
			condition_lx=" and b.sqglbyj='通过'";
		}else if("教务处".equalsIgnoreCase(yhbm)){
			condition_str="jwcyj";
			condition_zx=" and (b.cwcyj is null or b.jwcyj<>'通过')";
			condition_lx=" and b.jwcyj='通过'";
		}
		else if("学生工作部".equalsIgnoreCase(yhbm)){
			condition_str="xscyj";
			condition_zx=" and (b.xscyj is null or b.xscyj<>'通过')";
			condition_lx=" and b.xscyj='通过'";
		}
		
		StringBuffer query = new StringBuffer(" where 1=1");		
		query.append(nj == null || nj.trim().length() < 1 ? "": " and a.nj = '" + nj.trim() + "'");
		query.append(bjdm == null || bjdm.trim().length() < 1 ? "": " and a.bjdm= '" + bjdm.trim() + "'");		
		query.append(xydm == null || xydm.trim().length() < 1 ? "": " and a.xydm = '" + xydm.trim() + "'");
		query.append(xh == null || xh.trim().length() < 1 ? "": " and a.xh = '" + xh.trim() + "'");
		//保存审核结果
		if("save".equalsIgnoreCase(doType)){
			if(condition_str.equalsIgnoreCase("")){
				request.setAttribute("errMsg", "对不起，您没有审核权限！");
				return mapping.findForward("failure");
			}
			if(!condition_str.equalsIgnoreCase("")){
				String conditionSqlValue=DealString.toGBK(request.getParameter("conditionSqlValue"));
				String[] pkValues = conditionSqlValue.split("!!SplitSignOne!!");
				for(int i=0; i<pkValues.length;i++){
					String[] pkStr=pkValues[i].split("/");
					xh=pkStr[1];
					String sql="select xh from xslxxxb where xh=?";
					String strXh=dao.getOneRs(sql, new String[]{xh}, "xh");
					if(!"".equalsIgnoreCase(strXh) && strXh!=null){
						sql="update xslxxxb set "+condition_str+"='通过' where xh=?";
						falg=dao.runUpdate(sql, new String[]{xh});
					}else{
						sql="insert into xslxxxb(xh,"+condition_str+") values(?,'通过')";
						falg=dao.runUpdate(sql,new String[]{xh});
					}				
				}
				request.setAttribute("doFlag", falg?"ok":"no");
			}
		}//end if save
		
		//重新审批
		if("delete".equalsIgnoreCase(doType) && !condition_str.equalsIgnoreCase("")){							
				String sql="update xslxxxb set "+condition_str+"='未审核'"+" where xh in (select xh from view_xslxxx a "+query.toString()+")";
				falg=dao.runUpdate(sql,new String[]{});						
				request.setAttribute("doFlag", falg?"ok":"no");
		}//end if delete		
		
		
		String sql_zxxs="select a.xymc||'/'||a.xh||'/'||a.xm||'/'||a.nj||'/'||a.bjmc jbxx from view_bybbj c left join  view_xsjbxx a on a.bjdm=c.bjdm left join view_xslxxx b on a.xh=b.xh"+ query.toString()+condition_zx + " and (a.xjztm<>'无学籍' or a.xjztm is null) order by a.xh";
		String sql_pzlxxs="select a.xymc||'/'||a.xh||'/'||a.xm||'/'||a.nj||'/'||a.bjmc jbxx from view_bybbj c left join  view_xsjbxx a on a.bjdm=c.bjdm left join view_xslxxx b on a.xh=b.xh"+ query.toString()+condition_lx + " and (a.xjztm<>'无学籍' or a.xjztm is null) order by a.xh";
		
		request.setAttribute("writeAble", writeAble);
		System.out.println(sql_zxxs);
		System.out.println(sql_pzlxxs);
		if(doType!=null && !"".equalsIgnoreCase(doType)){
			request.setAttribute("zxList", dao.getList(sql_zxxs, new String[]{}, new String[]{"jbxx"}));
			request.setAttribute("lxList",dao.getList(sql_pzlxxs, new String[]{}, new String[]{"jbxx"}));
		}else{
			request.setAttribute("zxList",new ArrayList());
			request.setAttribute("lxList",new ArrayList());
		}
		if("班主任".equalsIgnoreCase(yhbm)){
			//班主任登陆
			request.setAttribute("njDisable", "njDisable");
			request.setAttribute("xyDisable", "xyDisable");
			request.setAttribute("xyList", lxDao.getXyListByXydm(userDep));
			request.setAttribute("bjList", lxDao.getBjListByFdy(userName));	
			
		}else if("系党总支书记".equalsIgnoreCase(yhbm)){
			String sql = "select xydm from xdzsjxxb where xm=?";
			userName = session.getAttribute("userName").toString();
			userDep = dao.getOneRs(sql, new String[]{userName}, "xydm");
			request.setAttribute("njList", dao.getNjList());
			request.setAttribute("xyList", lxDao.getXyListByXydm(userDep));
			request.setAttribute("bjList", lxDao.getBjListByXydm(userDep));			
		}else{
			request.setAttribute("njList", Base.getNjList());
			request.setAttribute("xyList", Base.getXyList());
			request.setAttribute("bjList", lxDao.getBjList(xydm, zydm, nj));		
		}
		
		return mapping.findForward("success");
	}
	
	/**
	 *  Method expData 导出数据方法
	 *  @param mapping
	 *  @param form
	 *  @param request
	 *  @param response
	 *  @return ActionForward
	 * */
	public static ActionForward expData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {		
		XslxForm xslx = (XslxForm)form;
		String tableName = request.getParameter("tableName");
		
		String sql = "";// sql语句
		String zd = " a.* ";
		
		String xh = xslx.getXh();
		String xm = DealString.toGBK(xslx.getXm());
		String nj = DealString.toGBK(xslx.getNj());
		String bjdm = xslx.getBjdm();
		String zydm = xslx.getZydm();
		String xydm = xslx.getXydm();
		String shdw = DealString.toGBK(xslx.getShdw());
		String shjg = DealString.toGBK(xslx.getShjg());
		
		StringBuffer query = new StringBuffer(" where 1=1");
		query.append(xh == null || xh.trim().length() < 1 ? "": " and a.xh like '%" + xh.trim() + "%'");
		query.append(xm == null || xm.trim().length() < 1 ? "": " and a.xm like '%" + xm.trim() + "%'");
		query.append(nj == null || nj.trim().length() < 1 ? "": " and a.nj = '" + nj.trim() + "'");
		query.append(bjdm == null || bjdm.trim().length() < 1 ? "": " and a.bjdm= '" + bjdm.trim() + "'");
		query.append(zydm == null || zydm.trim().length() < 1 ? "": " and a.zydm = '" + zydm.trim() + "'");
		query.append(xydm == null || xydm.trim().length() < 1 ? "": " and a.xydm = '" + xydm.trim() + "'");
		//选择了相应的审核单位和审核结果
		query.append((shdw!=null && !"".equalsIgnoreCase(shdw) && shjg!=null && !"".equalsIgnoreCase(shjg)) ? " and " + shdw + "='" + shjg + "' " : "" );
		//全部的审核单位＋审核结果
		query.append((shdw == null || shdw.equalsIgnoreCase("")) 
				&& (shjg!=null && !"".equalsIgnoreCase(shjg))  
				?  
						" and bzryj='" + shjg + "' and a.xdzsyj='" + shjg + "' and a.ywsyj='" + shjg +  
						"' and tsgyj='" + shjg + "' and a.cwcyj='" + shjg + "' and a.jwcyj='" + shjg + 
						"' and xscyj='" + shjg + "' and a.sqglbyj='" + shjg + "'"  
				: "");
		
		sql = "select " + zd + " from " + tableName + " a "+ query + " and exists(select 1 from view_bybbj  b where a.bjdm=b.bjdm) order by xh";
		response.reset();
		response.setContentType("application/vnd.ms-excel");
		Excel2Oracle.exportData(sql, tableName, response.getOutputStream());
		return mapping.findForward("success");
	}
}