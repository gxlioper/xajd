/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package xgxt.dtjs.gdby.tyxx;

import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import xgxt.action.Base;
import xgxt.action.BaseAction;
import xgxt.dtjs.czxx.tyxx.TyxxService;
import xgxt.dtjs.czxx.tyxx.TyxxbcModel;
import xgxt.form.SaveForm;
import xgxt.rcsw.kqgl.xskq.RcswKqglXskqService;
import xgxt.utils.FormModleCommon;
import xgxt.utils.GetTime;

/** 
 * MyEclipse Struts
 * Creation date: 07-28-2010
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class GdbyTyxxAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	protected static final String QUERY = "qry";//页面查询操作判断标志
	
	protected static final String DELETE = "del";//页面删除操作判断标志
	
	protected static final String VIEW = "view";//页面单个显示详细操作判断标志
	
	protected static final String MODIFY = "modi";//页面修改操作判断标志

	protected static final String SAVE = "save";//页面保存操作判断标志
	
	protected static final String TABNAME = "gdby_dtjs_tyxxb";//页面保存操作判断标志
	
	protected static final String VIEWNAME = "gdby_dtjs_tyxxzb";//页面保存操作判断标志
	
	/** 
	 * Method TyxxWh
	 * 团员信息维护
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward tyxxWh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session=request.getSession();
		RcswKqglXskqService rcswKqglXskqService=new RcswKqglXskqService();
		GdbyTyxxForm gdbyTyxxForm=(GdbyTyxxForm)form;
		
		String userDep=session.getAttribute("userDep").toString();
		String userType=session.getAttribute("userType").toString();
		String doType =request.getParameter("doType");
		
		if(QUERY.equalsIgnoreCase(doType)){
			String []outputColumn={"pk","checked","xh","xm","xb","nj","xymc","zymc","bjmc",};
			this.selectPageDataByPagination(request, form, "gdby_dtjs_tyxxzb", "view_gdby_dtjs_tyjbxxb", outputColumn);
		}
		
		if("xy".equalsIgnoreCase(userType)){
			gdbyTyxxForm.setXydm(userDep);
		}
		rcswKqglXskqService.writeAbled(request, "gdbyTyxx.do?method=tyxxWh");
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);						
		FormModleCommon.setNdXnXqList(request);
		return mapping.findForward("tyxxWh");
	}
	
	
	/** 
	 * Method tyxxCx
	 * 团员信息查询
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward tyxxCx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session=request.getSession();
		SaveForm saveForm=new SaveForm();
		GdbyTyxxService service=new GdbyTyxxService();
		RcswKqglXskqService rcswKqglXskqService=new RcswKqglXskqService();
		GdbyTyxxForm gdbyTyxxFrom=(GdbyTyxxForm)form;
		
		String userType=session.getAttribute("userType").toString();
		String userDep =session.getAttribute("userDep").toString();
		String doType =request.getParameter("doType");
		
		if(DELETE.equalsIgnoreCase(doType)){
			//删除 团员信息主表和副表中的数据
			this.deleteOperation(request, "gdby_dtjs_tyxxzb");
			this.deleteOperation(request,"gdby_dtjs_tyxxb");
			saveForm.setPk("xh");
			saveForm.setTableName("gdby_dtjs_tyxxydb");
			saveForm.setPkValue(request.getParameterValues("primarykey_cbv"));
			//删除异动信息表的数据
			service.delteTyyd(saveForm, saveForm);
			doType="qry";
		}
		
		
		if(QUERY.equalsIgnoreCase(doType)){
			String []outputColumn={"xh","xm","nj","xb","xymc","zymc","bjmc","sfyyd"};
			this.selectPageDataByPagination(request, form, "gdby_dtjs_tyxxzb", "view_gdby_dtjs_tyxxb", outputColumn);
		}
		
		if("xy".equalsIgnoreCase(userType)){
			gdbyTyxxFrom.setXydm(userDep);
		}
		rcswKqglXskqService.writeAbled(request, "gdbyTyxx.do?method=tyxxCx");
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);						
		FormModleCommon.setNdXnXqList(request);
		return mapping.findForward("tyxxCx");
	}
	
	/** 
	 * Method tyxxPlzj
	 * 批量增加团员信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward tyxxPlzj(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		HttpSession session=request.getSession();
		GdbyTyxxForm gdbyTyxxForm=(GdbyTyxxForm)form;
		GdbyTyxxModel gdbyTyxxModel=new GdbyTyxxModel();
		RcswKqglXskqService rcswKqglXskqService=new RcswKqglXskqService();
		TyxxService service = new TyxxService();
		String userType = session.getAttribute("userType").toString();
		String userDep = session.getAttribute("userDep").toString();
		
		//进行数据操作 的表名
		String realTable ="gdby_dtjs_tyxxzb";
		
		//保存查询出的所有信息的XH主键
		String[] tyxh = gdbyTyxxForm.getPrimarykey_cbv();
		//保存已选择的信息的主键
		String[] checkVal = gdbyTyxxForm.getCheckVal();
		BeanUtils.copyProperties(gdbyTyxxModel, gdbyTyxxForm);
		
		//判断操作是否成功
		boolean reslut = false;
		
		//批量增加及取消
		if (checkVal != null && checkVal.length > 0) {
			String pk = "xh";
			String[] arrzd = new String[] { "xh"};
			String[] sxh = new String[checkVal.length];
			int m = 0;
			for (int i = 0; i < checkVal.length; i++) {
				if (tyxh != null && tyxh.length > 0) {
					for (int j = 0; j < tyxh.length; j++) {
						if (tyxh[j].equalsIgnoreCase(checkVal[i])) {
							sxh[i] = checkVal[i];
							m++;
							break;
						}else{
							sxh[i]="";
						}
					}
				}
			}
			
			String[] xhArr = new String[m];
			int f = 0;
			for(int i=0; i<sxh.length;i++){
				if(!Base.isNull(sxh[i])){
					xhArr[f] = sxh[i];
					f++;
				}
			}
			SaveForm saveForm = new SaveForm();
			saveForm.setTableName(realTable);
			saveForm.setPk(pk);
			saveForm.setPkValue(checkVal);
			saveForm.setArrzd(arrzd);
			
			TyxxbcModel tyxxbc = new TyxxbcModel();
			tyxxbc.setXh(xhArr);
			reslut = service.saveTyxx(saveForm, tyxxbc);
			request.setAttribute("result", reslut);
		}
		//增加后再次查询
		String []outputColumn={"pk","checked","xh","xm","xb","nj","xymc","zymc","bjmc",};
		this.selectPageDataByPagination(request, form, "gdby_dtjs_tyxxzb", "view_gdby_dtjs_tyjbxxb", outputColumn);
		
		if("xy".equalsIgnoreCase(userType)){
			gdbyTyxxForm.setXydm(userDep);
		}
		rcswKqglXskqService.writeAbled(request, "gdbyTyxx.do?method=tyxxCx");
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);
		FormModleCommon.setNdXnXqList(request);
		
		return mapping.findForward("tyxxWh");
	}
	
	/**
	 * method tyxxOne
	 * 单个团员信息显示页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward tyxxOne(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		String doType=request.getParameter("doType");
		String pkValue=request.getParameter("pkValue");
		if(pkValue.length()>10){
			pkValue=pkValue.substring(0,10);
		}
		
		if(MODIFY.equalsIgnoreCase(doType)){
			HashMap<String,String>tableMap=new HashMap<String,String>();
			HashMap<String,String>valueMap=new HashMap<String,String>();
			tableMap.put("tableName", "gdby_dtjs_tyxxzb");
			tableMap.put("pkValue",pkValue);
			valueMap.put("xh",request.getParameter("xh"));
			valueMap.put("rtrq",request.getParameter("rtrq"));
			valueMap.put("rtdd",request.getParameter("rtdd"));
			//更新团员信息主表
			this.updateOperation(request, valueMap, tableMap);
			//添加团员信息副表信息
			this.deleteOperation(request, "gdby_dtjs_tyxxb");
			this.insertOperation(request, "gdby_dtjs_tyxxb");
		}
		
		if(!Base.isNull(doType)){
			this.selectPageDataByOne(request, "gdby_dtjs_tyxxb", "view_gdby_dtjs_tyxxb", pkValue);
		}
		
		request.setAttribute("doType", doType);
		request.setAttribute("xh", pkValue);
		request.setAttribute("pkValue", pkValue);
		return mapping.findForward("tyxxOne");
	}
	
	
	/**
	 * method tyxxOne
	 * 单个学生信息显示页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward xsxxOne(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		String doType=request.getParameter("doType");
		String pkValue=request.getParameter("pkValue");
		
		if(!Base.isNull(doType)){
			this.selectPageDataByOne(request, "xsxxb", "view_xsjbxx", pkValue);
		}
		
		request.setAttribute("xh", pkValue);
		request.setAttribute("pkValue", pkValue);
		return mapping.findForward("xsxxOne");
	}
	
	/**
	 * method tyxxYd
	 * 团员信息异动
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward tyxxYd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		HttpSession session=request.getSession();
		RcswKqglXskqService rcswKqglXskqService=new RcswKqglXskqService();
		GdbyTyxxService service=new GdbyTyxxService();
		GdbyTyxxForm gdbyTyxxForm=(GdbyTyxxForm)form;
		
		String userDep=session.getAttribute("userDep").toString();
		String userType=session.getAttribute("userType").toString();
		String doType =request.getParameter("doType");
		
		if(DELETE.equalsIgnoreCase(doType)){
			this.deleteOperation(request, "gdby_dtjs_tyxxydb");
			doType="qry";
		}
		
		if(QUERY.equalsIgnoreCase(doType)){
			String []outputColumn={"pk","xh","xm","nj","xb","xymc","zymc","bjmc","ydzt","ydlxmc","ydsj"};
			this.selectPageDataByPagination(request, form, "gdby_dtjs_tyxxydb", "view_gdby_dtjs_tyxxydb", outputColumn);
		}
		
		if("xy".equalsIgnoreCase(userType)){
			gdbyTyxxForm.setXydm(userDep);
		}
		
		
		rcswKqglXskqService.writeAbled(request, "gdbyTyxx.do?method=tyxxYd");
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);						
		FormModleCommon.setNdXnXqList(request);
		request.setAttribute("ydlxList", service.ydlxList());
		request.setAttribute("ydztList", service.ydztList());
		return mapping.findForward("tyxxYd");
	}
	
	
	
	/**
	 * method tyxxDgYd
	 * 团员信息单个异动
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward tyxxDgYd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		GdbyTyxxService service=new GdbyTyxxService();
		
		String doType=request.getParameter("doType");
		String pkValue=request.getParameter("pkValue");
		String xh=request.getParameter("xh");
		
		//团员信息异动
		if(MODIFY.equalsIgnoreCase(doType)){
			this.insertOperation(request, "gdby_dtjs_tyxxydb");
			service.checkTyZj(request.getParameter("save_xh"));
		}
		
		if(SAVE.equalsIgnoreCase(doType)){
			this.selectPageDataByOne(request, "gdby_dtjs_tyxxzb", "view_gdby_dtjs_tyxxb", xh);
			HashMap<String,String>hashMap=(HashMap<String,String>)request.getAttribute("rs");
			request.setAttribute("rs", hashMap);
		}
		
		request.setAttribute("ydztList", service.getTyydzt());
		request.setAttribute("xh", pkValue);
		request.setAttribute("pkValue", pkValue);
		return mapping.findForward("tyxxDgYd");
	}
	
	/**
	 * 信息导出
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward expDate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		String tName=request.getParameter("tName");
		
		try {
			
			this.expPageData(request, response, "gdby_dtjs_tyxxzb", tName, null);
		
		} catch (Exception e) {
		
			e.printStackTrace();
		
		}			
		
		return mapping.findForward("success");
	}
}