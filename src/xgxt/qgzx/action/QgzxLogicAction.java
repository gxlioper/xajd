/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package xgxt.qgzx.action;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jxl.write.WritableWorkbook;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import xgxt.DAO.DAO;
import xgxt.action.Base;
import xgxt.base.DealString;
import xgxt.daoActionLogic.StandardOperation;
import xgxt.form.CommanForm;
import xgxt.qgzx.service.QgzxService;
import xgxt.qgzx.service.XsgwglService;
import xgxt.qgzx.xbemy.XbemyQgzxDAO;
import xgxt.studentInfo.zgkd.XsxxZgkdService;
import xgxt.utils.ExcelMethods;
import xgxt.utils.FormModleCommon;
import xgxt.utils.String.StringUtils;

import common.Globals;

/** 
 * MyEclipse Struts
 * Creation date: 02-27-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class QgzxLogicAction extends DispatchAction {
	/***
	 * 加载页面参数
	 * @param request
	 * @param xydm
	 * @param zydm
	 * @param nj
	 * @return void
	 * */
	public void appendProperties(HttpServletRequest request, String xydm,
			String zydm, String nj) throws Exception {
		XsxxZgkdService service = new XsxxZgkdService();
		String xy = "";
		String zy = "";
		String njLocal = nj;
		xy = xy==null ? "": (xydm==null ? "" : xydm); 
		zy = zy==null ? "": (zydm==null ? "" : zydm); 
		njLocal = nj==null ? "": nj;
		String zyKey = xy==null ? "":xy; 
		String bjKey = xy+"!!"+zy+"!!"+njLocal;
		String userType = request.getSession().getAttribute("userType").toString();
		
		request.setAttribute("mzList", service.getMzList());
		request.setAttribute("zzmmList", service.getZzmmList());
		request.setAttribute("writeAble", "yes");//判断用户读写权
		request.setAttribute("xqList", Base.getXqList());//学期列表
		request.setAttribute("xnList", Base.getXnndList());//学年列表
		request.setAttribute("ndList", Base.getXnndList());//学年列表
		request.setAttribute("njList", Base.getNjList());//年级列表
		request.setAttribute("xyList", Base.getXyList());//学院列表
		request.setAttribute("zyList", Base.getZyMap().get(zyKey));//专业列表
		request.setAttribute("bjList", Base.getBjMap().get(bjKey));//班级列表		
		request.setAttribute("userType", userType);//用户类型		
	}
	
	/**
	 * 审核通过学生信息库
	 * @param ActionMapping mapping
	 * @param ActionForm form
	 * @param HttpServletRequest request
	 * @param HttpServletResponse response
	 * @throws Exception 
	 * */
	public ActionForward stuPassCkeckInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommanForm model= (CommanForm) form;
		HttpSession session = request.getSession();
		XsgwglService service = new XsgwglService();
		QgzxService qgzx =  new QgzxService();
		DAO dao = DAO.getInstance();
		String userDep = session.getAttribute("userDep").toString();
		String userName = session.getAttribute("userName").toString();
		String userType = dao.getUserType(userDep);
		String tableName= "view_xsgwxx";
		String realTable ="xsgwxxb";
		String pk="xh||gwdm||sqsj";
		String xxdm = StandardOperation.getXxdm();
		String writeAble = Base.getWriteAble(request);
		List<String[]> rs = null;
		
		if(userType.equalsIgnoreCase("xy")){
			model.setXydm(userDep);
		}		
		
		String go = request.getParameter("go");
		if("go".equalsIgnoreCase(go)){
			if(!Globals.XXDM_CZXXZYJSXY.equalsIgnoreCase(xxdm)){
				//非常州师范职业技术学院
				model.setXxyj("通过");
				model.setXyyj("通过");
				model.setFdyyj("通过");
			}else{
				model.setXyyj("通过");
				model.setXxyj("通过");
			}
			rs = service.queryXsgwxxb(model);			
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rs.size());
			request.setAttribute("topTr", service.getXsgwxxbTopTr());
		}
		
		request.setAttribute("userType", userType);
		request.setAttribute("realTable", realTable);
		request.setAttribute("tableName", tableName);
		request.setAttribute("pk",pk);
		request.setAttribute("writeAble", writeAble);
		appendProperties(request, model.getXydm(), model.getZydm(), model.getNj());
		request.setAttribute("gwList", qgzx.getGwmcList(userName));
		request.setAttribute("yrdwList", qgzx.getYrdwList(userName));//用人单位列表
		return mapping.findForward("success");
	}
	
	/**
	 * 云南艺术保存岗位信息
	 * */
	public ActionForward saveStationInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
//		CommanForm stuInfo= (CommanForm) form;
		HttpSession session = request.getSession();
		QgzxService service = new QgzxService();
		DAO dao= DAO.getInstance();
		boolean flag = false;
		String sql="";
		String userDep = session.getAttribute("userDep").toString();
		String userType = dao.getUserType(userDep);
		String doType = request.getParameter("doType");
		String tableName = "view_gwxx";
		
		String sqdw = request.getParameter("sqdw");
		String xq = request.getParameter("xq");
		String gzsj = DealString.toGBK(request.getParameter("gzsj"));
		String dwdz = DealString.toGBK(request.getParameter("dwdz"));
		String fzr = DealString.toGBK(request.getParameter("fzr"));
		String lxdh = request.getParameter("lxdh");
		String gzkssj = request.getParameter("gzkssj");
		String gzjssj = request.getParameter("gzjssj");
		String jcfs = DealString.toGBK(request.getParameter("jcfs"));
		String jybcbz = DealString.toGBK(request.getParameter("jybcbz"));
		String gwtsyq = DealString.toGBK(request.getParameter("gwtsyq"));
		String sqdwyj = DealString.toGBK(request.getParameter("sqdwyj"));
		String bz = DealString.toGBK(request.getParameter("bz"));
		String xn = request.getParameter("xn");
		String nd = request.getParameter("nd");
		String xueqi = dao.getOneRs("select xq from gwsqsjb", new String[]{}, "xq");
		String sqsj="";
		if(doType.equalsIgnoreCase("modi")){
			String gwmc = DealString.toGBK(request.getParameter("gwmc1")).trim();
			if(gwmc!=null && !"".equalsIgnoreCase(gwmc)){
				String gwsl = request.getParameter("gwsl1");
				String ryyq = DealString.toGBK(request.getParameter("ryyq1"));
				String gznr = DealString.toGBK(request.getParameter("gznr1"));
				String gwxz = DealString.toGBK(request.getParameter("gwxz1"));
				String xyboy = request.getParameter("xyboy1");
				String xygirl = request.getParameter("xygirl1");
				if(xyboy==null || xyboy.equalsIgnoreCase(""))
					xyboy="0";
				if(xygirl==null || xygirl.equalsIgnoreCase(""))
					xygirl="0";
				String xyrs = Integer.toString(Integer.parseInt(xyboy)+Integer.parseInt(xygirl));
				sqsj = request.getParameter("sqsj");				
				
				String[] values={xn,nd,xueqi,jcfs,bz,xq,gwmc,gwxz,sqdw,sqsj,gznr,gzsj,gzkssj,gzjssj,xyrs,
						jybcbz,fzr,lxdh,sqdwyj,gwtsyq,xyboy,xygirl,gwsl,ryyq,dwdz};
				
				String[] inputValue={"xn","nd","xueqi","jcfs","bz","xq","gwdm","gwxz","sqdw","sqsj","gznr",
						"gzsj","gzksrq","gzjsrq","xyrs","jybcbz","fzr","lxdh","sqdwyj","gwtsyq","xyboy","xygirl",
						"gwsl","ryyq","dwdz"};
				flag=StandardOperation.update("gwxxb", inputValue, values, "sqsj||sqdw||gwdm", sqsj+sqdw+gwmc, request);
			}
		}else{
		for(int i=1;i<6;i++){
			String gwmc = DealString.toGBK(request.getParameter("gwmc"+i));
			if(gwmc!=null && !"".equalsIgnoreCase(gwmc)){
				String gwsl = request.getParameter("gwsl"+i);
				String ryyq = DealString.toGBK(request.getParameter("ryyq"+i));
				String gznr = DealString.toGBK(request.getParameter("gznr"+i));
				String gwxz = DealString.toGBK(request.getParameter("gwxz"+i));
				String xyboy = request.getParameter("xyboy"+i);
				String xygirl = request.getParameter("xygirl"+i);
				if(xyboy==null || xyboy.equalsIgnoreCase(""))
					xyboy="0";
				if(xygirl==null || xygirl.equalsIgnoreCase(""))
					xygirl="0";
				String xyrs = Integer.toString(Integer.parseInt(xyboy)+Integer.parseInt(xygirl));
				sqsj = dao.getOneRs("select to_char(sysdate,'yyyy-mm-dd') sqsj from dual",
						new String[] { }, "sqsj");
				
				String[] values={xn,nd,xueqi,jcfs,bz,xq,gwmc,gwxz,sqdw,sqsj,gznr,gzsj,gzkssj,gzjssj,xyrs,
						jybcbz,fzr,lxdh,sqdwyj,gwtsyq,xyboy,xygirl,gwsl,ryyq,dwdz};
				
				String[] inputValue={"xn","nd","xueqi","jcfs","bz","xq","gwdm","gwxz","sqdw","sqsj","gznr",
						"gzsj","gzksrq","gzjsrq","xyrs","jybcbz","fzr","lxdh","sqdwyj","gwtsyq","xyboy","xygirl",
						"gwsl","ryyq","dwdz"};
				flag=StandardOperation.insert("gwxxb", inputValue, values, request);
			}
		}
		}
		
		sql ="select * from "+tableName;
		if(doType.equalsIgnoreCase("modi")){
			sql = "select * from "+tableName+" where sqsj='"+sqsj+"'";
		}
		String[] input=dao.getColumnName(sql);
		HashMap< String, String> map = new HashMap<String, String>();
		map = dao.getMap(sql, new String[]{},input );
		
		sql = "select * from yrdwdmb";		
		if(!userType.equals("admin") || "xy".equalsIgnoreCase(userType))
			sql += " where xydm='" + userDep +"'";
		List<HashMap<String, String>> sqdwList = dao.getList(sql, new String[] {}, new String[] {"yrdwdm", "yrdwmc" });
		//		获取岗位性质列表
		sql = "select * from gwxzdmb";
		List<HashMap<String, String>> gwxz = dao.getList(sql, new String[] {}, new String[] {
				"gwxzdm", "gwxzmc" });
		sql = "select * from dm_zju_xq";
		List<HashMap<String, String>> xqdm = dao.getList(sql, new String[] {}, new String[] {
				"dm", "xqmc" });
		request.setAttribute("xqList1", xqdm);
		request.setAttribute("gwxzList", gwxz);
		request.setAttribute("sqdwList", sqdwList);
		request.setAttribute("result", flag);
		request.setAttribute("rs", map);
		request.setAttribute("doType", "");
		request.setAttribute("jcfsList", service.queryJcfsList(true));
		return mapping.findForward("qgzx_ynys_gwxxb");
	}
	
	/**
	 * 廊坊师范打印考核表
	 * */
	public ActionForward printReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		//CommanForm staInfo= (CommanForm) form;
		//HttpSession session = request.getSession();
		DAO dao= DAO.getInstance();
		HashMap< String, String> map = new HashMap<String, String>();
		List<HashMap<String, String>> rs = null;
		String tableName = "view_lfsf_xskh";
		String sql = "";	
		
		String gwmc = DealString.toGBK(request.getParameter("gwmc")).trim();
		String xh = request.getParameter("xh").trim();
		//String time = GetTime.getXskhrq ();
		//sql = "select to_char(sysdate,'yyyymm') nowTime,to_char(sysdate,'dd') nowdata from dual";
		//String timeTmp [] =dao.getOneRs(sql, new String[]{}, new String[]{"nowTime","nowdata"});
		//String data = timeTmp [1];
		
		sql = "select xm,xymc,nj,zymc,lxdh from view_xsjbxx where xh=?";
		map = dao.getMap(sql, new String[]{xh},new String[]{"xm","xymc","nj","zymc","lxdh"});
		map.put("gwmc", gwmc);
		sql = "select day,gznr,gzqssj,gzjssj from "+tableName +" where xh=? and gwmc=?";
		
		rs = dao.getList(sql, new String[]{xh,gwmc}, new String[]{"day","gznr","gzqssj","gzjssj"});
		//dao.getList(sql, inputValue, outputValue)
		request.setAttribute("map", map);
		request.setAttribute("rs", rs);
		return mapping.findForward("qgzx_lfsf_xsgwkhb");
	}
	
	/**
	 * 廊坊师范数据统计
	 * */
	@SuppressWarnings("unchecked")
	public ActionForward dataStatistics(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommanForm data = (CommanForm) form;
		DAO dao = DAO.getInstance();		
		List rs= null;
		List<List> list = new ArrayList<List>();
		List<HashMap<String, String>> xyList= null;
		String[] outputValue= null;
		String[] colListCN = null;
		String sql = "";
		String tableName = "view_lfsf_qgzxtj";
		String writeAble = Base.getWriteAble(request);
			
		String xn = data.getXn();
		String xq = data.getXq();
		String nj = data.getNj();
		String xydm = data.getXydm();
		String yf = data.getYf();
		String type = request.getParameter("doType");
		
		StringBuffer sb = new StringBuffer(" where 1=1 ");
		sb.append(xn==null || xn.equalsIgnoreCase("")? " ":" and xn='"+xn+"'");
		sb.append(xq==null || xq.equalsIgnoreCase("")? " ":" and xq='"+xq+"'");
		sb.append(nj==null || nj.equalsIgnoreCase("")? " ":" and nj='"+nj+"'");
		sb.append(yf==null || yf.equalsIgnoreCase("")? " ":" and yf='"+yf+"'");
		sb.append(xydm==null || xydm.equalsIgnoreCase("")? " ":" and xydm='"+xydm+"'");
		xydm = xydm==null || xydm.equalsIgnoreCase("") ? "%" : xydm ;
		
		outputValue = new String[]{"序号","xm","年级专业","gwdm","cjje","gzsj","lxdh","bz"};
		colListCN = dao.getColumnNameCN(outputValue, tableName);
		List topTr = dao.arrayToList(outputValue, colListCN);
		outputValue = new String[]{"xymc","序号","xm","njzymc","gwdm","cjje","gzsj","lxdh","bz"};
		if(type!=null && type.equalsIgnoreCase("go")){		
			xyList = dao.getList("select distinct xydm,xymc from view_njxyzybj  where xydm like ? order by xydm", new String[]{xydm}, new String[]{"xymc","xydm"});
			for(int i=0;i<xyList.size(); i++){
				HashMap<String, String> xymap = xyList.get(i);
				xydm = xymap.get("xydm");
				sql = "select rownum 序号,xm,nj||zymc njzymc,gwdm,cjje,gzsj,lxdh,bz,xymc from "+tableName+ sb.toString() + " and xydm like ?";
				rs = dao.rsToVator(sql,new String[]{xydm} , outputValue);
				if(rs!=null && rs.size()>0){
					list.add(rs);
				}
			}
			writeAble = "yes";
		}
		yf = yf==null||yf.equalsIgnoreCase("")?"": yf+"月";
		request.setAttribute("yf", yf);
		request.setAttribute("topTr", topTr);
		request.setAttribute("xnList", Base.getXnndList());
		request.setAttribute("xqList", Base.getXqList());
		request.setAttribute("xyList", Base.getXyList());
		request.setAttribute("njList", Base.getNjList());
		request.setAttribute("list", list);
		request.setAttribute("yfList", dao.getYfList());
		request.setAttribute("writeAble",writeAble);
		return mapping.findForward("qgzx_lfsf_sjtj");
	}	

	/**
	 * 广东白云学院学生岗位申请 
	 * */
	public ActionForward saveStationOfStu(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommanForm data = (CommanForm) form;
		HttpSession session = request.getSession();
		DAO dao = DAO.getInstance();
		boolean flag = true;
		String userType = session.getAttribute("userOnLine").toString();
		String userDep = session.getAttribute("userDep").toString();
		String userTP= dao.getUserType(userDep);
		String xh = request.getParameter("xh");
		String xmdm = DealString.toGBK(request.getParameter("xmdm"));
		String sql = "";
//		String sfpks = "";
		
//		String gwmc = data.getGwdm();
		String yhtc = data.getYhtc();
		String jtzyjjly = data.getJtzyjjly();
		String sqly = DealString.toGBK(request.getParameter("xssq"));
		String bz = data.getBz();
		
		//家庭成员信息
		String jtcy1_xm = data.getJtcy1_xm();
		String jtcy1_cw = data.getJtcy1_cw();
		String jtcy1_gzdwjzw = data.getJtcy1_gzdwjzw();
		String jtcy1_nsr = data.getJtcy1_nsr();		
		String jtcy2_xm = data.getJtcy2_xm();
		String jtcy2_cw = data.getJtcy2_cw();
		String jtcy2_gzdwjzw = data.getJtcy2_gzdwjzw();
		String jtcy2_nsr = data.getJtcy2_nsr();		
		String jtcy3_xm = data.getJtcy3_xm();
		String jtcy3_cw = data.getJtcy3_cw();
		String jtcy3_gzdwjzw = data.getJtcy3_gzdwjzw();
		String jtcy3_nsr = data.getJtcy3_nsr();		
		String jtcy4_xm = data.getJtcy4_xm();
		String jtcy4_cw = data.getJtcy4_cw();
		String jtcy4_gzdwjzw = data.getJtcy4_gzdwjzw();
		String jtcy4_nsr = data.getJtcy4_nsr();
		String lxdh = data.getLxdh();
		String xskysj = DealString.toGBK(request.getParameter("kcjqgzxsj"));
		
		sql = "select xn,nd,xq from gwsqsjb where rownum=1";
		String[] tmp = dao.getOneRs(sql, new String[] {}, new String[] {"xn", "nd", "xq" });
		String xn = tmp[0];
		String nd = tmp[1];
		String xq = tmp[2];
		
		if (userType.equalsIgnoreCase("student")) {
			xh = session.getAttribute("userName").toString();
		} else {
			xh = data.getXh();
		}
		
		String gwdmgwsbsj = xmdm;
		if ("".equalsIgnoreCase(gwdmgwsbsj) || gwdmgwsbsj == null) {
			gwdmgwsbsj = DealString.toGBK(request.getParameter("xmdmmodi"));
		}

//		sfpks = dao.isKns(xh) ? "是" : "否";
		String gwdm = gwdmgwsbsj.split("-")[0];
		String gwsbsj = gwdmgwsbsj.split("-")[1];
		
		flag = StandardOperation.delete("xsgwxxb", "xh||gwdm||gwsbsj", xh + gwdm + gwsbsj, request);
		if(flag){
			String[] columns = {"xh","gwdm","yhtc","jtzyjjly","xssq","bz","gwsbsj","xn","nd","xq","lxdh","kcjqgzxsj","jtcy1_xm","jtcy1_cw","jtcy1_gzdwjzw","jtcy1_nsr","jtcy2_xm","jtcy2_cw","jtcy2_gzdwjzw","jtcy2_nsr","jtcy3_xm","jtcy3_cw","jtcy3_gzdwjzw","jtcy3_nsr","jtcy4_xm","jtcy4_cw","jtcy4_gzdwjzw","jtcy4_nsr"};
			String[] values = {xh,gwdm,yhtc,jtzyjjly,sqly,bz,gwsbsj,xn,nd,xq,lxdh,xskysj,jtcy1_xm,jtcy1_cw,jtcy1_gzdwjzw,jtcy1_nsr,jtcy2_xm,jtcy2_cw,jtcy2_gzdwjzw,jtcy2_nsr,jtcy3_xm,jtcy3_cw,jtcy3_gzdwjzw,jtcy3_nsr,jtcy4_xm,jtcy4_cw,jtcy4_gzdwjzw,jtcy4_nsr};
			flag = StandardOperation.insert("xsgwxxb", columns, values, request);
		}
		
		sql = "select distinct gwdm from view_gwxx";
		if (!userTP.equals("admin") || "xy".equalsIgnoreCase(userType)) {
			sql += " where xydm='" + userDep + "'";
		}
		List<HashMap<String, String>> gwList = dao.getList(sql, new String[] {}, new String[] { "gwdm" });
		
		sql = "select * from kcjsjdmb";
		List<HashMap<String, String>> kysjList = dao.getList(sql, new String[] {}, new String[] {"kcjsjdm", "kcjsjmc" });
		HashMap<String, String> map = new HashMap<String, String>();
		
		String[] colList = dao.getColumnName("select a.*,a.gwdm||'-'||gwsbsj xmdm from view_xsgwxx a");
		String[] outValue = new String[colList.length];
		sql = "select a.*,a.gwdm||'-'||gwsbsj xmdm from  view_xsgwxx a where xh||gwdm||sqsj = ?";
		outValue = dao.getOneRs(sql, new String[] {xmdm}, colList);
		
		if(outValue!=null){
		for (int i = 0; i < colList.length; i++) {
			if (outValue[i] == null || outValue[i].equals(null)) {
				map.put(colList[i].toLowerCase(), "");
			} else {
				map.put(colList[i].toLowerCase(), outValue[i].toString());
			}
		}
		}
		request.setAttribute("gwList", gwList);
		request.setAttribute("kysjList", kysjList);
		request.setAttribute("result",flag);
		request.setAttribute("dataSaved", "ok");
		request.setAttribute("rs", map);		
		return mapping.findForward("qgzx_byxy_gwsq");
	}	
	
	/**
	 *  广东白云学院学生岗位申请报表
	 * */
	public ActionForward printStationOfStu(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {		
		DAO dao = DAO.getInstance();
		HashMap<String, String> rs = new HashMap<String, String>();
		String xh = request.getParameter("xh");
		String sql = "select xm,xb,xymc,bjmc from view_xsjbxx where xh=?";
		rs = dao.getMap(sql, new String[]{xh},new String[]{"xm","xb","xymc","bjmc"});
		
		request.setAttribute("rs",rs);
		return mapping.findForward("qgzx_byxy_printapply");
	}
	
	/**
	 * 广东女子勤工助学现有岗位一览表
	 * */
	public ActionForward browseStation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
//		CommanForm data =(CommanForm) form;
		List<String[]> rs= null;
		DAO dao = DAO.getInstance();
		String xn = Base.currXn;
		String nd = Base.currNd;
		String xq = Base.currXq;
		String[] outValue = {"xqmc","gwdm","gwxzmc","sqdw","xymc","sqsj","gznr","gzsj","gzksrq","gzjsrq","sqsyrs","sqsyknss","jcfsmc","spbcbz","fzr","lxdh"};
		
		String  sql = "select xqmc,gwdm,gwxzmc,sqdw,xymc,sqsj,gznr,gzsj,gzksrq,gzjsrq,sqsyrs,sqsyknss,jcfsmc,spbcbz,fzr,lxdh from view_gwxx where shjg='通过' and xn=? and nd=? and xueqi=?";
		rs = dao.rsToVator(sql,new String[]{xn,nd,xq},outValue);
		
		String[] colListCN = dao.getColumnNameCN(outValue, "view_gwxx");
		List<HashMap<String, String>> topTr = dao.arrayToList(outValue, colListCN);
		request.setAttribute("rs", rs);
		request.setAttribute("topTr", topTr);
		request.setAttribute("rsNum", rs.size());		
		return mapping.findForward("qgzx_gdnz_browsestation");
	}
	
	/**
	 * 广东女子简介须知发布
	 * */
	public ActionForward infoPub(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String gnmkdm = request.getParameter("gnmkdm");
		
		request.setAttribute("gnmkdm", gnmkdm);
		request.setAttribute("path", "qgzxLogic.do?method=infoPub&gnmkdm="+gnmkdm);
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("infopub");
	}
	
	/**
	 * 广东女子保存发布信息
	 * @throws Exception 
	 * */
	public ActionForward savePubInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		DAO dao = DAO.getInstance();
		boolean flag = false;		
		String tableName = "qgzx_gdnzzy_mkxx";
		String title = DealString.toGBK(request.getParameter("infoTitle"));		
		String content = DealString.toGBK(request.getParameter("content1"));
		String sql = "select count(*) num from qgzx_gdnzzy_mkxx where title =?";
		int count = Integer.parseInt(dao.getOneRs(sql, new String[]{title}, "num"));
		if(count>0){
			flag = StandardOperation.update(tableName, new String[]{"content"}, new String[]{content}, "title", title, request);
		}else{
			flag = StandardOperation.insert(tableName, new String[]{"title","content"}, new String[]{title,content}, request);
		}
		request.setAttribute("result", flag);
		request.setAttribute("gnmkdm", request.getParameter("gnmkdm"));
		return mapping.findForward("infopub");
	}
	
	/**
	 * 广东女子信息查询
	 * */
	public ActionForward introduceInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		DAO dao = DAO.getInstance();
		String title = DealString.toGBK(request.getParameter("title")); 
		String infoContent = "";
		String infoTitle= "";
		String sql = "select * from qgzx_gdnzzy_mkxx where title=?";
		
		infoTitle = dao.getOneRs(sql,new String[]{title}, "title");
		infoContent = dao.getOneRs(sql, new String[]{title}, "content");
		
		request.setAttribute("infotitle", infoTitle);
		request.setAttribute("infocontent", infoContent);
		request.setAttribute("path", "qgzxLogic.do?method=introduceInfo&title="+title);
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("info");
	}
	
	/**
	 * 广东女子上岗学生名单打印
	 * */
	public ActionForward nameList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		DAO dao = DAO.getInstance();
		String type= request.getParameter("type");//1.上岗学生名单 2.待岗学生名单 3.困难生名单
		List<String[]> rs = null;
		String sql = "";
		String[] inputValue = new String[]{};
		String[] outputValue = null;
		List<HashMap<String, String>> topTr = null;
		String[] cName = null; 
		String tableName = "";
		String topdiv = "";
		String title = "";
		
		if(type.equalsIgnoreCase("1")){
			//.上岗学生名单
			topdiv = "勤工助学 - 名单打印 - 上岗学生名单打印";
			title = "上岗学生名单";
			tableName = "view_xsgwxx";
			sql = "select xh,xm,xb,zymc,bjmc,gwdm from view_xsgwxx where xxyj='通过'";
			outputValue = new String[]{"xh","xm","xb","zymc","bjmc","gwdm"};
		}else if(type.equalsIgnoreCase("2")){
			//.待岗学生名单
			topdiv = "勤工助学 - 名单打印 - 待岗学生名单打印";
			title = "待岗学生名单";
			tableName = "view_xsgwxx";
			sql = "select xh,xm,xb,zymc,bjmc from view_xsgwxx where xxyj<>'通过' ";
			outputValue = new String[]{"xh","xm","xb","zymc","bjmc"};
		}else{
			//.困难生名单
			topdiv = "勤工助学 - 名单打印 - 困难学生名单打印";
			title = "困难学生名单";
			tableName = "view_gdnzzyjsxy_knsxx";
			sql = "select distinct xh,xm,xb,zymc,bjmc from view_gdnzzyjsxy_knsxx where xxsh in ('一般困难','特别困难')";
			outputValue = new String[]{"xh","xm","xb","zymc","bjmc"};
		}
		rs = dao.rsToVator(sql, inputValue, outputValue);
		cName = dao.getColumnNameCN(outputValue, tableName);
		topTr = dao.arrayToList(outputValue, cName);
		
		request.setAttribute("title", title);
		request.setAttribute("rsNum", rs.size());
		request.setAttribute("topdiv", topdiv);
		request.setAttribute("topTr", topTr);
		request.setAttribute("rs", rs);
		return mapping.findForward("namelist");
	}
	
	/**
	 * 上海工程勤工助学申请时间设置
	 * */
	public ActionForward TimeConf(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		DAO dao = DAO.getInstance();		
		List<String[]> rs = new ArrayList<String[]>();
		String writeAble = Base.getWriteAble(request);
		String[] outputValue = new String[]{"pk","gwmc","gwsbsj","kssj","jssj"};
		String[] colnumCN = dao.getColumnNameCN(outputValue, "view_sqgwsj");
		List<HashMap<String, String>> topTr = dao.arrayToList(outputValue, colnumCN);
		
		String sql = "select distinct gwmc||'-'||gwsbsj pk, gwmc,gwsbsj,kssj,jssj from view_sqgwsj";
		rs = dao.rsToVator(sql, new String[]{}, outputValue);
		
		request.setAttribute("writeAble", writeAble);
		request.setAttribute("topTr", topTr);
		request.setAttribute("rs", rs);
		request.setAttribute("rsNum", rs.size());
		return mapping.findForward("timeconf");
	}
	
	
	/**
	 * 上海工程勤工助学申请时间设置显示修改页
	 * */
	public ActionForward showModify(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		String writeAble = Base.getWriteAble(request);
		DAO dao = DAO.getInstance();
		String sql = "";
		String pk = DealString.toGBK(request.getParameter("operPk"));
		request.setAttribute("pk", pk);
		String type = request.getParameter("doType");
		if("single".equalsIgnoreCase(type)){
			String[] outputValue = {"kssj1","kssj2","kssj3","kssj4","jssj1","jssj2","jssj3","jssj4"};
			sql = "select strtodatetime(substr(kssj,1,8)) kssj1,"
				+ "substr(kssj,9,2) kssj2," + "substr(kssj,11,2) kssj3,"
				+ "substr(kssj,13,2) kssj4,"
				+ "strtodatetime(substr(jssj,1,8)) jssj1,"
				+ "substr(jssj,9,2) jssj2," + "substr(jssj,11,2) jssj3,"
				+ "substr(jssj,13,2) jssj4 from view_sqgwsj "
				+ "where gwmc||'-'||gwsbsj=?";
			pk = pk.split("!!")[1];
			String[] values = dao.getOneRs(sql, new String[]{pk}, outputValue);
			for(int i=0 ;i<outputValue.length ;i++ ){
				request.setAttribute(outputValue[i], (values[i]==null||"".equalsIgnoreCase(values[i]))? "" : values[i]);
			}			
		}		
		
		request.setAttribute("type", type);		
		request.setAttribute("writeAble", writeAble);
		return mapping.findForward("show_timeconf_page");
	}
	
	/**
	 * 上海工程勤工助学申请时间设置显示修改页
	 * */
	public ActionForward saveTimeConf(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		String writeAble = Base.getWriteAble(request);
		boolean flag = false;
		DAO dao = DAO.getInstance();
		String sql = "";
		String pk = DealString.toGBK(request.getParameter("pk"));
		String kssj = request.getParameter("kssqsj");
		String jssj = request.getParameter("jssqsj");
		String[] pkValue = pk.split("!!");
		for(int i=0; i<pkValue.length-1; i++){
			int num = 0;
			String[] pkV = pkValue[i+1].split("-");
			String gwmc = pkV[0];
			String gwsbsj = pkV[1];
			sql = "select count(*) num from sqgwsjb where gwmc=? and gwsbsj=?";
			num = Integer.parseInt(dao.getOneRs(sql, new String[]{gwmc,gwsbsj}, "num"));			
			if(num>0){
				//update
				flag = StandardOperation.update("sqgwsjb", new String[]{"kssj","jssj"}, new String[]{kssj,jssj}, "gwmc||gwsbsj",gwmc+gwsbsj, request);
			}else{
				//insert 
				flag = StandardOperation.insert("sqgwsjb", new String[]{"gwmc","gwsbsj","kssj","jssj"}, new String[]{gwmc,gwsbsj,kssj,jssj}, request);
			}
		}
		
		request.setAttribute("pk", "");
		request.setAttribute("result", flag);
		request.setAttribute("writeAble", writeAble);
		return mapping.findForward("show_timeconf_page");
	}
	
	/**
	 * 上海工程勤工助学岗位申请时间设置
	 * */
	public ActionForward StationTimeConf(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		DAO dao = DAO.getInstance();		
		List<String[]> rs = new ArrayList<String[]>();
		String writeAble = Base.getWriteAble(request);
		String[] outputValue = new String[]{"dwdm","dwmc","kssj","jssj"};
		String[] colnumCN = dao.getColumnNameCN(outputValue, "view_dwsqsj");
		List<HashMap<String, String>> topTr = dao.arrayToList(outputValue, colnumCN);
		
		String sql = "select distinct dwdm,dwmc,kssj,jssj from view_dwsqsj";
		rs = dao.rsToVator(sql, new String[]{}, outputValue);
		
		request.setAttribute("writeAble", writeAble);
		request.setAttribute("topTr", topTr);
		request.setAttribute("rs", rs);
		request.setAttribute("rsNum", rs.size());
		return mapping.findForward("stationtimeconf");
	}
	
	/**
	 * 上海工程勤工助学申请时间设置显示修改页
	 * */
	public ActionForward showModifyOfStation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		String writeAble = Base.getWriteAble(request);
		DAO dao = DAO.getInstance();
		String sql = "";
		String pk = DealString.toGBK(request.getParameter("operPk"));
		request.setAttribute("pk", pk);
		String type = request.getParameter("doType");
		if("single".equalsIgnoreCase(type)){
			String[] outputValue = {"kssj1","kssj2","kssj3","kssj4","jssj1","jssj2","jssj3","jssj4"};
			sql = "select strtodatetime(substr(kssj,1,8)) kssj1,"
				+ "substr(kssj,9,2) kssj2," + "substr(kssj,11,2) kssj3,"
				+ "substr(kssj,13,2) kssj4,"
				+ "strtodatetime(substr(jssj,1,8)) jssj1,"
				+ "substr(jssj,9,2) jssj2," + "substr(jssj,11,2) jssj3,"
				+ "substr(jssj,13,2) jssj4 from view_dwsqsj "
				+ "where dwdm=?";
			pk = pk.split("!!")[1];
			String[] values = dao.getOneRs(sql, new String[]{pk}, outputValue);
			for(int i=0 ;i<outputValue.length ;i++ ){
				request.setAttribute(outputValue[i], values[i]==null||"".equalsIgnoreCase(values[i])? "" : values[i]);
			}			
		}		
		
		request.setAttribute("type", type);		
		request.setAttribute("writeAble", writeAble);
		return mapping.findForward("show_station_timeconf_page");
	}
	
	/**
	 * 上海工程勤工助学申请时间设置显示修改页
	 * */
	public ActionForward saveStationTimeConf(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
//		String writeAble = Base.getWriteAble(request);
		boolean flag = false;
		DAO dao = DAO.getInstance();
		String sql = "";
		String pk = request.getParameter("pk");
		String kssj = request.getParameter("kssqsj");
		String jssj = request.getParameter("jssqsj");
		String[] pkValue = pk.split("!!");
		for(int i=0; i<pkValue.length-1; i++){
			int num = 0;
			sql = "select count(*) num from dwsqsjb where dwdm=?";
			num = Integer.parseInt(dao.getOneRs(sql, new String[]{pkValue[i+1]}, "num"));
			if(num>0){
				//update
				flag = StandardOperation.update("dwsqsjb", new String[]{"kssj","jssj"}, new String[]{kssj,jssj}, "dwdm", DealString.toGBK(pkValue[i+1]), request);
			}else{
				//insert 
				flag = StandardOperation.insert("dwsqsjb", new String[]{"dwdm","kssj","jssj"}, new String[]{DealString.toGBK(pkValue[i+1]),kssj,jssj}, request);
			}
		}
		
		request.setAttribute("pk", "");
		request.setAttribute("result", flag);
		return mapping.findForward("show_station_timeconf_page");
	}
	
	/**
	 * 上海工程酬金发放
	 * */
	public ActionForward showSinglePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
//		String writeAble = Base.getWriteAble(request);
		CommanForm com = (CommanForm)form;
		DAO dao = DAO.getInstance();
		String sql = "";
		HashMap<String, String> map = new HashMap<String, String>();
		String pk = request.getParameter("pk");
		String pkValue = DealString.toGBK(request.getParameter("pkValue"));
		String gwxz = DealString.toGBK(request.getParameter("gwxz"));
		gwxz = gwxz==null || "".equalsIgnoreCase(gwxz) ? "" : gwxz.trim();
		String yrdw = DealString.toGBK(request.getParameter("yrdw"));
		String yf = request.getParameter("yf");
		
		String yrdwdm = dao.getOneRs("select yrdwdm from yrdwdmb where yrdwmc=?",new String[] { yrdw }, "yrdwdm");
		String gwxzdm = dao.getOneRs("select gwxzdm from gwxzdmb where gwxzmc=?",new String[] { gwxz }, "gwxzdm");
		
		sql = "select xn,nd,xq from gwsqsjb where rownum=1";
		String[] tmp = dao.getOneRs(sql, new String[] {}, new String[] {"xn", "nd", "xq" });
		map.put("xn", tmp[0]);
		map.put("nd", tmp[1]);
		map.put("xq", tmp[2]);
		
		sql = "select to_char(sysdate,'yyyy-mm-dd') time from dual";
		tmp = dao.getOneRs(sql, new String[] {},new String[] { "time" });
		yf = (yf==null ||"".equalsIgnoreCase(yf))? tmp[0].substring(5, 7) : yf;
		map.put("yf",yf);
		com.setYf(yf);
		
		sql = "select sqdw,gznr,gwxzmc,decode(jcfs,'h','元/小时','d','元/天','w','元/周','m','元/月') jcfs,spbcbz,decode(jcfs,'h','小时','d','天','w','周','m','月') gzsjdw, gwsbsj, gwdm, yrdwmc, gwxz,xymc from view_gwxx where "
				+ pk + "='" + pkValue + "'";
		tmp = dao.getOneRs(sql, new String[] {}, new String[] { "sqdw",
				"gznr", "gwxzmc", "jcfs", "spbcbz", "gzsjdw", "gwsbsj",
				"gwdm", "yrdwmc", "gwxz", "xymc" });
		map.put("sqdw", tmp[0]);
		map.put("gznr", tmp[1]);
		map.put("gwxzmc", tmp[2]);
		map.put("jcfs", tmp[3]);
		map.put("jybcbz", tmp[4]);
		map.put("gzsjdw", tmp[5]);
		map.put("gwsbsj", tmp[6]);
		map.put("gwdm", tmp[7]);
		map.put("yrdwmc", tmp[8]);
		map.put("gwxz", tmp[9]);
		map.put("xymc", tmp[10]);
		// 剩余经费=划拨金额+增拨金额-发放金额(划拨金额+增拨金额=hbje)
		sql = "select nvl((select sum(hbje) from jfhbb where nd=? and yrdwdm=? and gwxzdm=? and yrdwdm=?),0)-nvl((select sum(cjje) from view_xscjff where nd=? and sqdw=? and gwxzmc=? and yrdwmc=?),0) syjf from dual";
		tmp = dao.getOneRs(sql, new String[] { map.get("nd"),
				map.get("sqdw"), gwxzdm, yrdwdm, map.get("nd"),
				map.get("sqdw"), gwxz, yrdw }, new String[] { "syjf" });
		map.put("syjf", tmp[0]);		
		
		sql = "select * from xscjffb a,xsgwxxb b where a.xh=b.xh and a.gwdm=b.gwdm and a.sqsj=b.gwsbsj and b.gwdm||b.gwsbsj='"
				+ pkValue
				+ "' and a.nd='"
				+ map.get("nd")
				+ "' and a.yf='" + yf + "'";

		List<HashMap<String, String>> li_lrh = dao.getListNotOut(sql, new String[] {});
		if (null != li_lrh && 0 != li_lrh.size()) {
			request.setAttribute("doflag", "modi");
		} else {
			request.setAttribute("doflag", "add");
		}
		sql = "select count(*) sumcount from xscjffb where yf='"+yf+"' and gwdm||sqsj='" + pkValue + "'";
		if(Integer.parseInt(dao.getOneRs(sql, new String[]{}, "sumcount"))>0){
			//本月的发放记录存在
			sql = "select a.*,b.gzsj,b.cjje,b.bz,b.khqk ,c.kh  from (select rownum,xh,xm,bjmc,gwsbsj,gwdm from view_xsgwxx where gwdm||gwsbsj=(select gwdm||gwsbsj from view_gwxx where "
				+ pk
				+ "='"
				+ pkValue
				+ "') and xyyj='通过' and xxyj='通过') a left join xscjffb b on a.xh=b.xh and a.gwsbsj=b.sqsj and a.gwdm=b.gwdm"
				+ " and b.nd='"
				+ map.get("nd")
				+ "' and b.yf='"
				+ yf
				+ "' left join view_stu_details c on c.xh=b.xh";
			String ffsj = dao.getOneRs("select distinct ffsj from xscjffb where nd=? and yf=? and gwdm=(select gwdm from view_gwxx where "+ pk +" = '"+ pkValue +"')", new String[]{map.get("nd"),yf}, "ffsj");
			map.put("ffsj", ffsj);			
		}else{
			//本月未发放酬金
			String je = dao.getOneRs("select spbcbz from view_gwxx where " + pk + " ='" + pkValue + "'", new String[]{}, "spbcbz");
			je = je==null || je.equalsIgnoreCase("") ? "0" : je;
			int spbcbz = Integer.parseInt(je);
			sql = "select a.*,b.gzsj,b.gzsj*"+spbcbz+" cjje,c.kh  from (select rownum,xh,xm,bjmc,gwsbsj,gwdm ,nd,sqsj from view_xsgwxx where gwdm||gwsbsj=(select gwdm||gwsbsj from view_gwxx where "
				+ pk
				+ "='"
				+ pkValue
				+ "') and xyyj='通过' and xxyj='通过') a left join xsgzkhb b on a.xh=b.xh and a.sqsj=b.sbsj and a.gwdm=b.gwdm"
				+ " and a.nd='"
				+ map.get("nd")
				+ "' and b.yf='"
				+ yf
				+ "' left join view_stu_details c on c.xh=b.xh";
		}		
		
		ArrayList<HashMap<String, String>> ffList = new ArrayList<HashMap<String, String>>();
		List<HashMap<String, String>> li_lrh2 = dao.getListNotOut(sql,
				new String[] {});
		int count = 0;
		for (int i = 0; i < li_lrh2.size(); i++) {
			HashMap<String, String> map1 = new HashMap<String, String>();
			map1 = li_lrh2.get(i);			
			count = count + 1;
			ffList.add(map1);
		}
		request.setAttribute("workInfo", map);
		request.setAttribute("count", Integer.toString(count));
		request.setAttribute("ffList", ffList);// 发送数据集
		request.setAttribute("pk", pk);
		request.setAttribute("pkValue", pkValue);
		request.setAttribute("count", ffList.size());
		return mapping.findForward("shgc_batch_workpay");
	}
	
	/**
	 * 上海工程酬金单个发放
	 * */
	public ActionForward saveSingleWorkPay(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		String writeAble = Base.getWriteAble(request);
		boolean flag = false;
		CommanForm com = (CommanForm)form;
		String tableName = "xscjffb";
		String pk = "gwdm||gwsbsj";
		
		String pkValue = DealString.toGBK(request.getParameter("pkValue"));
		String yf = request.getParameter("dqyf");
		yf = com.getYf();
		String ffsj = request.getParameter("ffsj");
		String gwdm = DealString.toGBK(request.getParameter("gwdm"));
		String sqsj = DealString.toGBK(request.getParameter("gwsbsj"));
		String xn = request.getParameter("xn");
		String nd = request.getParameter("nd");
		String xq = request.getParameter("xq");
		int num = Integer.parseInt(request.getParameter("count"));
		flag = StandardOperation.delete(tableName, "gwdm||sqsj", pkValue, request);
		if(flag){
		for(int i=0; i<num; i++){
			String xh = request.getParameter("xh"+i);
			String gzsj = request.getParameter("gzsj"+i);
			String cjje = request.getParameter("cjje"+i);
			String bz = request.getParameter("bz"+i);					
			if(flag){
				flag = StandardOperation.insert(tableName, new String[]{"xh","gwdm","cjje","ffsj","bz","sqsj","gzsj","xn","nd","xq","yf"}, new String[]{xh,gwdm,cjje,ffsj,bz,sqsj,gzsj,xn,nd,xq,yf}, request);
			}
		}	
		}
		request.setAttribute("count", "0");
		request.setAttribute("ffList", new ArrayList());// 发送数据集
		request.setAttribute("pk", pk);
		request.setAttribute("pkValue", pkValue);
		request.setAttribute("result", flag);
		request.setAttribute("doflag", "");
		request.setAttribute("workInfo", new HashMap<String, String>());
		request.setAttribute("writeAble", writeAble);
		return mapping.findForward("shgc_batch_workpay");
	}
	
	/**
	 * 上海工程显示批量发放页
	 * */
	public ActionForward showBatchPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		String writeAble = Base.getWriteAble(request);		
		
		request.setAttribute("writeAble", writeAble);
		return mapping.findForward("shgc_batchpage");		
	}
	
	/**
	 * 上海工程批量发放酬金保存
	 * */
	public ActionForward saveBatchPay(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommanForm com = (CommanForm) form;
		HttpSession session = request.getSession();
		DAO dao = DAO.getInstance();
		boolean flag = false;
		String sql = "";
		HashMap<String, String> map = new HashMap<String, String>();
		String yf = com.getYf();
		String ffsj = com.getFfsj();
//		String gwdm = "";
		String tableName = "xscjffb";
		String userDep = session.getAttribute("userDep").toString();
		String userType = dao.getUserType(userDep);
		
		sql = "select xn,nd,xq from gwsqsjb where rownum=1";
		String[] tmp = dao.getOneRs(sql, new String[] {}, new String[] {"xn", "nd", "xq" });
		map.put("xn", tmp[0]);
		map.put("nd", tmp[1]);
		map.put("xq", tmp[2]);
		
		sql = "select distinct gwdm,gwsbsj,gwxz from view_gwxx where shjg='通过' ";
		List list = dao.rsToVator(sql, new String[]{}, new String[]{"gwdm","gwsbsj","gwxz"});
		for(int i=0; i<list.size(); i++){
			String[] val = (String[])list.get(i);
			String pk="gwdm||gwsbsj";
			String pkValue = val[0]+val[1].substring(0,4)+val[1].substring(5,7)+val[1].substring(8,10)+val[1].substring(12,14)+val[1].substring(15,17)+val[1].substring(18,20);
			String num = dao.getOneRs("select spbcbz from view_gwxx where "+pk+"='" + pkValue + "'", new String[]{}, "spbcbz");
			num = (num==null||"".equalsIgnoreCase(num))?"0":num;
			int spbcbz = Integer.parseInt(num);
			sql = "select a.*,b.gzsj,b.gzsj*"+spbcbz+" cjje,c.kh  from (select rownum,xh,xm,bjmc,gwsbsj,gwdm ,nd,sqsj from view_xsgwxx where gwdm||gwsbsj=(select gwdm||gwsbsj from view_gwxx where "
				+ pk
				+ "='"
				+ pkValue
				+ "') and xyyj='通过' and xxyj='通过') a left join xsgzkhb b on a.xh=b.xh and a.gwsbsj=b.sbsj and a.gwdm=b.gwdm"
				+ " and a.nd='"
				+ map.get("nd")
				+ "' and b.yf='"
				+ yf
				+ "' left join view_stu_details c on c.xh=b.xh";
			List reList = dao.rsToVator(sql, new String[]{}, new String[]{"xh","gwdm","cjje","sqsj","gwsbsj","gzsj"});
			for(int j=0;j<reList.size();j++){
				String[] reVal = (String[]) reList.get(j);
				String sqsj = "";
				String sqsjV = reVal[3];
				if(sqsjV!=null||!"".equalsIgnoreCase(sqsjV)){
					sqsj = sqsjV.substring(0,4)+sqsjV.substring(5,7)+sqsjV.substring(8,10)+sqsjV.substring(12,14)+sqsjV.substring(15,17)+sqsjV.substring(18,20);
				}
				pkValue = reVal[1]+sqsj;
				flag = StandardOperation.delete(tableName, "gwdm||sqsj", pkValue, request);
				if(flag){
					flag = StandardOperation.insert(tableName, new String[]{"xh","gwdm","cjje","ffsj","bz","sqsj","gzsj","xn","nd","xq","yf"}, new String[]{reVal[0],reVal[1],reVal[2],ffsj,"",sqsj,reVal[5],map.get("xn"),map.get("nd"),map.get("xq"),yf}, request);
				}
			}
		}		
		
		sql = "select distinct gwdm from view_gwxx";
		if (!userType.equals("admin") || "xy".equalsIgnoreCase(userType)) {
			sql += " where xydm='" + userDep + "'";
		}
		List gwList = dao.getList(sql, new String[] {}, new String[] { "gwdm" });
		request.setAttribute("ndList", Base.getXnndList());
		request.setAttribute("xnList", Base.getXnndList());
		request.setAttribute("xqList", Base.getXqList());
		request.setAttribute("gwList", gwList);
		request.setAttribute("tableName", "view_gwxx");
		request.setAttribute("act", "workPayPut");
		request.setAttribute("realTable", "gwxxb");
		request.setAttribute("pk", "gwdm||gwsbsj");
		request.setAttribute("day", "day");
		request.setAttribute("result", flag);
		return mapping.findForward("shgc_batchpage");
	}
	
	/**
	 * 岗位发布批量审核
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward postBatchAuditing(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommanForm model = (CommanForm) form;
		QgzxService service = new QgzxService();
//		String pkValue = DealString.toGBK(request.getParameter("pkString"));
		String type = request.getParameter("type");
		String userName = request.getSession().getAttribute("userName").toString();
		String userType = request.getSession().getAttribute("userType").toString();
		
		service.postBatchAudi(model, type, userType,userName);
		
		return new ActionForward("/post_check.do?go=go");
	}
	
	/**
	 * 学生岗位申请批量审核
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward postStuBatchAuditing(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		QgzxService service = new QgzxService();
		
		String pkValue = DealString.toGBK(request.getParameter("pkString"));
		String xhValue = DealString.toGBK(request.getParameter("xhString"));
		String type = request.getParameter("type");
		String userName = request.getSession().getAttribute("userName").toString();
		String userType = request.getSession().getAttribute("userType").toString();
		HttpSession session = request.getSession();
		String message = "";
		String isFdy = session.getAttribute("fdyQx").toString();
		String isBzr = session.getAttribute("bzrQx").toString();
		String xxdm = StandardOperation.getXxdm();
		if(xxdm.equalsIgnoreCase(Globals.XXDM_ZGKYDX)){
			//中国矿业大学			
			message = service.checkPostAudi(pkValue,xhValue,type,userType,userName);
			if("".equalsIgnoreCase(message)){
				service.postStuBatchAudi(pkValue, type, userType,userName);
			}
			request.setAttribute("mes", message);
			request.setAttribute("result", "".equalsIgnoreCase(message) ? true: false);			
		}else if(xxdm.equalsIgnoreCase(Globals.XXDM_ZGDZDX)){
			//中国地质大学
			message = service.checkPostCount(pkValue, type);
			if("".equalsIgnoreCase(message)){
				service.postStuBatchAudi(pkValue, type, userType, userName);
			}
			request.setAttribute("mes", message);
			request.setAttribute("result", "".equalsIgnoreCase(message) ? true: false);
		}else{
			if(xxdm.equalsIgnoreCase(Globals.XXDM_ZJJTZYJSXY)){
				HashMap<String, String> map = service.postStuBatchAudi(pkValue, type, userType,userName,isFdy,isBzr);
			}else{
				HashMap<String, String> map = service.postStuBatchAudi(pkValue, type, userType,userName);
			}
			HashMap<String, String> map = service.postStuBatchAudi(pkValue, type, userType,userName,isFdy,isBzr);
			request.setAttribute("mes", map.get("msg"));
			request.setAttribute("result", "true".equalsIgnoreCase(map.get("flag")) ? true: false);
		}
		
		return new ActionForward("/post_stu_check.do?go=go");
	}
	
	/**
	 * 勤工助学工资发放表打印
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward 
	 * */
	public ActionForward printPayReport(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)
	throws Exception {
		QgzxService service = new QgzxService();
		String xxdm = StandardOperation.getXxdm();
		String userName = request.getSession().getAttribute("userName").toString();
		String modelPath = servlet.getServletContext().getRealPath("")+"/print/qgzxgzffb.xls";
		response.reset();
		response.setContentType("application/vnd.ms-excel");
		
		if(xxdm.equalsIgnoreCase(Globals.XXDM_XCXY)){
			//西昌学院
			modelPath = servlet.getServletContext().getRealPath("")+"/print/qgzx/xcxy_qgzxgzffb.xls";
		}
		if(Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)){
			//广州大学
			modelPath = servlet.getServletContext().getRealPath("")+"/print/qgzx/gzdx_qgzxgzffb.xls";
		}
		if(Globals.XXDM_CZXXZYJSXY.equalsIgnoreCase(xxdm)){
			//常州信息职业技术学院
			modelPath = servlet.getServletContext().getRealPath("") + "/print/qgzx/czxx_qgzxgzffb.xls";
		}
		if(Globals.XXDM_NBTYZYJSXY.equalsIgnoreCase(xxdm)){
			//宁波天一职业技术学院
			modelPath = servlet.getServletContext().getRealPath("") + "/print/qgzx/nbty_qgzxgzffb.xls";
		}
		if(xxdm.equalsIgnoreCase(Globals.XXDM_ZJJDZYJSXY)){
			//浙江机电
			modelPath = servlet.getServletContext().getRealPath("") + "/print/qgzx/zjjd_qgzxgzffb.xls";
		}
		
		WritableWorkbook wwb = ExcelMethods.getWritableWorkbook(new File(modelPath), response.getOutputStream());
		if(xxdm.equalsIgnoreCase(Globals.XXDM_ZJJJZYJSXY)){
			//浙江经济职业技术学院
			service.printPayReportZjjj(wwb);			
		}else if(xxdm.equalsIgnoreCase(Globals.XXDM_XCXY)){
			//西昌学院
			service.printPayReportXcxy(wwb);
		}else if(Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)){			
			//广州大学
			String gwxzmc = request.getParameter("gwxzmc");
			service.printPayReportGzdx(wwb, userName, gwxzmc);
		}else if(Globals.XXDM_CZXXZYJSXY.equalsIgnoreCase(xxdm)){
			//常州信息职业技术学院
			service.printPayReportCzxx(wwb);
		}else if(Globals.XXDM_NBTYZYJSXY.equalsIgnoreCase(xxdm)){
			//宁波天一职业技术学院
			service.printPayRePortNbtyzyjsxy(wwb,userName);
		}else if(Globals.XXDM_ZJCMXY.equalsIgnoreCase(xxdm)){
			//浙江传媒学院
			modelPath = servlet.getServletContext().getRealPath("") + "/print/zjcmxyqgzxgzffb.xls";
			wwb = ExcelMethods.getWritableWorkbook(new File(modelPath), response.getOutputStream());			
			service.printPayReportZjcmxy(wwb);			
		}else if(Globals.XXDM_GDNZZYJSXY.equalsIgnoreCase(xxdm)){
			//广东女子勤工助学工资报表打印
			service.printPayRePortGdnzzyjsxy(wwb);
		}else{
			service.printPayReport(wwb);
		}
		return mapping.findForward("");
	}
	
	/**
	 * 岗位批量删除
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward delPost(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		QgzxService service = new QgzxService();
		String page = request.getParameter("page");
		
		String pkValue = DealString.toGBK(request.getParameter("pkString"));
		
		request.setAttribute("result",service.delePost(pkValue,request));		
		if(page != null && !"".equalsIgnoreCase(page)){
			return new ActionForward("/data_search2.do?act=work&go=go");
		}
		return new ActionForward("/post_check.do?go=go");
	}
	
	/**
	 * 学生岗位批量删除
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward delStuPost(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		QgzxService service = new QgzxService();
		String pkValue = DealString.toGBK(request.getParameter("pkString"));
		
		request.setAttribute("result",service.deleStuPost(pkValue,request));			
		return searchXsgwxx(mapping, form, request, response);
	}
	
	/**
	 * 学生岗位是否有效信息批量修改
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward modiSfyxFlag(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		QgzxService service = new QgzxService();
		String pkValue = DealString.toGBK(request.getParameter("pkString"));
		
		request.setAttribute("result",service.modiStuPost(pkValue,request));			
		return searchXsgwxx(mapping, form, request, response);
	}
	
	/**
	 * 学生勤工助学申请结果查询
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 * */
	public ActionForward searchXsgwxx(ActionMapping mapping, ActionForm form,HttpServletRequest request,
			HttpServletResponse response) throws Exception{
			CommanForm model = (CommanForm) form;
			HttpSession session = request.getSession();
			QgzxService service = new QgzxService();
			String userType = session.getAttribute("userType").toString();
			String isFdy = session.getAttribute("isFdy").toString();
			String userName = session.getAttribute("userName").toString();
			String userDep = session.getAttribute("userDep").toString();
			
			model.setUserType(userType);
			if(service.isYrdwUser(userName) && StringUtils.isNull(model.getYrdwdm())){
				//用人单位只能查询本用人单位的信息
				model.setYrdwdm(service.getYrdwUser(userName));
			}
			String xydm = model.getXydm();
			String zydm = model.getZydm();
			String nj = model.getNj();
			//model.setIsFdy(isFdy);
			model.setIsFdy(session.getAttribute("fdyQx").toString());
			model.setBzr(session.getAttribute("bzrQx").toString());
			model.setUserName(userName);
			
			//武汉商业辅导员等用户控制数据范围
			if(Base.xxdm.equalsIgnoreCase(Globals.XXDM_WHSYFWXY)){
				if("xy".equals(userType)){
					model.setXydm(userDep);
				}
				FormModleCommon.setNjXyZyBjListForFdyBzr(request);
				FormModleCommon.setNdXnXqList(request);
			//浙江交通辅导员等用户控制数据范围
			}else if(Base.xxdm.equalsIgnoreCase(Globals.XXDM_ZJJTZYJSXY)){
				if(isFdy.equals("true")){
					model.setXydm(xydm);
				}else if("xy".equals(userType)){
					model.setXydm(userDep);
				}
				
				FormModleCommon.setNjXyZyBjListForFdyBzr(request);
				FormModleCommon.setNdXnXqList(request);
			}else{
				appendProperties(request, xydm, zydm, nj);
				if("true".equalsIgnoreCase(isFdy)){
					request.setAttribute("zyList", service.getZyListByFdy(userName));
					request.setAttribute("bjList", service.getBjListByFdy(userName));
				}
			}
			
			List<String[]> rs = service.searchXsgwxx(model);
			
			request.setAttribute("act", request.getParameter("act"));
			request.setAttribute("pk", "xh||gwdm||sqsj");
			request.setAttribute("topTr", service.getXsgwxxToptr());
		
			HashMap<String, String> paramter = new HashMap<String, String>();
			paramter.put("userName", userName);
			paramter.put("xn", model.getXn());
			paramter.put("nd", model.getNd());
			paramter.put("xq", model.getXq());
			paramter.put("yrdwdm", model.getYrdwdm());
			paramter.put("gwxzdm", model.getGwxz());
			
			request.setAttribute("gwList",service.getGwmcxxList(paramter,"no"));//所有审核通过岗位列表
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rs.size());
			request.setAttribute("realTable", "xsgwxxb");
			request.setAttribute("tableName", "view_xsgwxx");
			request.setAttribute("yrdwList", service.getYrdwList(userName));
			request.setAttribute("gwxzList", service.getGwxzList());//岗位性质列表
			request.setAttribute("userType1", userType);
			request.setAttribute("userDep1", userDep);
			request.setAttribute("isFdy", session.getAttribute("fdyQx").toString());
			request.setAttribute("isBzr", session.getAttribute("bzrQx").toString());
			request.setAttribute("path", "post_stu_result.do");
			FormModleCommon.commonRequestSet(request);
			return mapping.findForward("xsgwxxcx");
	}
	
	/**
	 * 学生查询勤工助学岗位详细信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward showPostDetails(ActionMapping mapping, ActionForm form,HttpServletRequest request,
			HttpServletResponse response){
		String pkValue =DealString.toGBK(request.getParameter("pkValue"));
		QgzxService service = new QgzxService();		
		List<HashMap<String, String>> kxList = new ArrayList<HashMap<String, String>>();
		List<HashMap<String, String>> whkxList = service.getKxList();
		
		kxList = service.getGzsjKxbz(pkValue);//岗位的空闲时间标志
		
		request.setAttribute("kxbz", kxList);
		request.setAttribute("kxbzNum", kxList.size());	
		
		request.setAttribute("whkxList", whkxList);		
		request.setAttribute("rs", service.getPostDetail(pkValue));
		return new ActionForward("/qgzx/shgc/shgc_gwxx_detail.jsp",false);
	}
	
	/**
	 * 显示勤工助学工资补发时间设置页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward showReTime(ActionMapping mapping, ActionForm form,HttpServletRequest request,
			HttpServletResponse response){
		String pk = DealString.toGBK(request.getParameter("pk"));//主键
		String pkValue = DealString.toGBK(request.getParameter("pkValue"));
		String gwmc = DealString.toGBK(request.getParameter("gwmc"));//岗位名称
		
		QgzxService service = new QgzxService();
		String xx = StandardOperation.getXxdm();
		if(xx.equalsIgnoreCase(Globals.XXDM_ZGDZDX)){
			request.setAttribute("xx", xx);//中国地质大学
		}
		request.setAttribute("ndList", Base.getXnndList());//学年年度列表
		request.setAttribute("xqList", Base.getXqList());//学期列表 
		request.setAttribute("yfList", service.getYfList());//月份列表
		request.setAttribute("pk", pk);//主键
		request.setAttribute("pkValue", pkValue);//主键值
		request.setAttribute("gwmc", gwmc);//用户在页面显示
		return mapping.findForward("reTime");
	}
	
	/**
	 * 显示勤工助学工资补发页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward showReWorkPay(ActionMapping mapping, ActionForm form,HttpServletRequest request,
			HttpServletResponse response){
		CommanForm model = (CommanForm) form;
		String pkValue = DealString.toGBK(request.getParameter("pk"));//主键
		QgzxService service = new QgzxService();
		model.setPkValue(pkValue);
		List<HashMap<String, String>> list = service.getStuByPost(model);
		
		request.setAttribute("workInfo", service.getWorkInfo(model));//岗位的详细信息和经费信息
		request.setAttribute("ffList", list);//参加该岗位的所有学生
		request.setAttribute("nd", model.getNd());
		request.setAttribute("xn", model.getXn());
		request.setAttribute("xq", model.getXq());
		request.setAttribute("yf", model.getYf());
		request.setAttribute("count", list.size());
		request.setAttribute("pk", "gwdm||gwsbsj");
		request.setAttribute("pkValue", pkValue);
		return mapping.findForward("reWorkPay");
	}
	
	/**
	 * 保存勤工助学工资补发
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward saveReWorkPay(ActionMapping mapping, ActionForm form,HttpServletRequest request,
			HttpServletResponse response){
		CommanForm model = (CommanForm) form;
		String pkValue = DealString.toGBK(request.getParameter("pk"));//主键
		String xn = request.getParameter("xn");
		String nd = request.getParameter("nd");
		String xq = request.getParameter("xq");
		String yf = request.getParameter("yf");
		String count = request.getParameter("count");
		QgzxService service = new QgzxService();
		model.setPkValue(pkValue);
		model.setXn(xn);
		model.setNd(nd);
		model.setXq(xq);
		model.setYf(yf);
		model.setCount(count);//学生记录数	
		
		List list = service.getStuByPost(model);
		boolean flag = service.saveReWorkPay(model, request); //保存工资补发信息
		
		request.setAttribute("result", flag);
		request.setAttribute("workInfo", service.getWorkInfo(model));//岗位的详细信息和经费信息
		request.setAttribute("ffList", list);//参加该岗位的所有学生
		request.setAttribute("nd", model.getNd());
		request.setAttribute("xn", model.getXn());
		request.setAttribute("xq", model.getXq());
		request.setAttribute("yf", model.getYf());
		request.setAttribute("count", list.size());
		request.setAttribute("pkValue", pkValue);		
		return mapping.findForward("reWorkPay");
	}
	
	/**
	 * 查询岗位详细信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward queryGwxxxx(ActionMapping mapping, ActionForm form,HttpServletRequest request,
			HttpServletResponse response){
		HttpSession session=request.getSession();
		
		String userDep =session.getAttribute("userDep").toString();
		String userType = session.getAttribute("userType").toString();
		String pk = request.getParameter("pk");
		String xxdm = StandardOperation.getXxdm();
		QgzxService service = new QgzxService();
		List<HashMap<String, String>> kxsjList = service.getGzsjKxbz(pk);
		if(Globals.XXDM_GZDX.equalsIgnoreCase(xxdm) 
				&& "xy".equalsIgnoreCase(userType)){
			request.setAttribute("rs", service.queryGwxx("gwdm||gwsbsj",pk,userDep));//岗位的详细信息
		}else{
			request.setAttribute("rs", service.queryGwxx("gwdm||gwsbsj",pk));//岗位的详细信息
		}
		request.setAttribute("xsList", service.getCjgwxsList("gwdm||gwsbsj",pk));//参加岗位的学生列表
		request.setAttribute("whkxList", service.getKxList());
		request.setAttribute("kxbz", kxsjList);
		request.setAttribute("kxbzNum", kxsjList.size());
		request.setAttribute("xxdm", StandardOperation.getXxdm());
		if(Globals.XXDM_BJLHDX.equalsIgnoreCase(xxdm)){
			//北京联合大学
			request.setAttribute("mxsbc", service.getSqsjInfo().get("mxsbc"));
		} else if(Globals.XXDM_CSMZZYJSXY.equalsIgnoreCase(xxdm)){
			//长沙民政
			request.setAttribute("xyknsrs", service.getSqsjInfo().get("knsbl"));
		} else if(Globals.XXDM_XBEMY.equalsIgnoreCase(xxdm)){
			//西北二民院自定义字段
			XbemyQgzxDAO xbDao = new XbemyQgzxDAO();
			List<HashMap<String, String>>  filedList = xbDao.getFiledInfo("001");//勤工助学项目
			request.setAttribute("filedList", filedList);
			request.setAttribute("rsNum", filedList.size());
		} else if (Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)) {
			//广州大学
			return mapping.findForward("gzdx_gwxxxx");
		} 
		return mapping.findForward("gwxxxx");
	}
	
	/**
	 * 查询广州大学学生岗位申请信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 * */
	public ActionForward showGzdxXsgwxxb(ActionMapping mapping, ActionForm form,HttpServletRequest request,
			HttpServletResponse response) throws Exception{
		XsgwglService service = new XsgwglService();		
		String pk = request.getParameter("pk");
		String pkValue = request.getParameter("pkValue");
		HashMap<String, String> map = service.queryGzdxXsgwxxb(pk,pkValue);
		
		//学生可参加勤工助学时间信息
		service.freeTimeTableGzdx(map.get("xh"), request);//'空闲时间表'数据		
		request.setAttribute("rs", map);//查询广州大学学生岗位详细信息
		return mapping.findForward("gzdx_xsgwxx");
	}
	
	/**
	 * 查询中国地质大学学生岗位申请信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 * */
	public ActionForward showZgdzdxXsgwxxb(ActionMapping mapping, ActionForm form,HttpServletRequest request,
			HttpServletResponse response) throws Exception{
		XsgwglService service = new XsgwglService();
		QgzxService qgzxService = new QgzxService();
		
		String pk = request.getParameter("pk");
		String pkValue = request.getParameter("pkValue");
		HashMap<String, String> map = service.queryZgdzdxXsgwxxb(pk,pkValue);
		
		//学生可参加勤工助学时间信息
		service.freeTimeTableZgdzdx(map.get("xh"), request);//'空闲时间表'数据
		map.put("sfpks", qgzxService.isKns(map.get("xh")) ? "是" : "否");
		request.setAttribute("rs", map);//查询广州大学学生岗位详细信息
		return mapping.findForward("zgdzdx_xsgwxx");
	}
	
	/**
	 * 展示各种人数的学生信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward showRsxxDetail(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){
		String pk = request.getParameter("pk");
		String lx = request.getParameter("lx");
		QgzxService service = new QgzxService();
		List<HashMap<String, String>> list = new ArrayList<HashMap<String,String>>();
		String title = "勤工助学-岗位发布-";
		if("sqrs".equalsIgnoreCase(lx)){
			list = service.getSqgwxsList("gwdm||gwsbsj",pk); //申请岗位学生
			title += "申请学生";
		}else if("lyrs".equalsIgnoreCase(lx)){
			list = service.getCjgwxsList("gwdm||gwsbsj",pk); //参加岗位学生
			title += "录用学生";
		}
		request.setAttribute("xsList", list);//学生列表
		request.setAttribute("title", title);//当前位置
		return mapping.findForward("rsxxdetail");
	}
}