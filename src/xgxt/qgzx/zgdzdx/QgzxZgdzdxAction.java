/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package xgxt.qgzx.zgdzdx;

import java.io.File;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jxl.write.WritableWorkbook;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import xgxt.action.Base;
import xgxt.base.DealString;
import xgxt.base.Excel2Oracle;
import xgxt.daoActionLogic.StandardOperation;
import xgxt.qgzx.service.QgzxService;
import xgxt.qgzx.service.XsgwglService;
import xgxt.studentInfo.service.XsxxglService;
import xgxt.utils.ExcelMethods;
import xgxt.utils.FormModleCommon;
import xgxt.utils.GetTime;
import xgxt.utils.String.StringUtils;

import com.zfsoft.basic.BasicAction;
import common.Globals;

/**
 * <p>
 * Title: 学生工作管理系统
 * </p>
 * <p>
 * Description: 中国地质大学勤工助学Action
 * <p>
 * Copyright: Copyright (c) 2008
 * </p>
 * <p>
 * Company: zfsoft
 * </p>
 * <p>
 * Author: 李容
 * </p>
 * <p>
 * Version: 1.0
 * </p>
 * <p>
 * Time: 2008-09-23
 * </p>
 */
public class QgzxZgdzdxAction extends BasicAction {

	/**
	 * 公用方法:在REQUEST中存放页面所要加载的属性
	 * 
	 * @param request
	 * @param xydm
	 * @param zydm
	 * @param nj
	 * @return void
	 * @throws Exception
	 */
	public void appendProperties(HttpServletRequest request, String xydm,
			String zydm, String nj) throws Exception {
		String xy = "";
		String zy = "";
		String njLocal = nj;
		xy = xy == null ? "" : (xydm == null ? "" : xydm);
		zy = zy == null ? "" : (zydm == null ? "" : zydm);
		njLocal = nj == null ? "" : nj;
		String zyKey = xy == null ? "" : xy;
		String bjKey = xy + "!!" + zy + "!!" + njLocal;
		String userType = request.getSession().getAttribute("userType").toString();
		// String writeAble = Base.getWriteAble(request);
		request.setAttribute("writeAble", FormModleCommon.getWriteAbleAndTitle(request)[0]);// 判断用户读写权
		request.setAttribute("xqList", Base.getXqList());// 学期列表
		request.setAttribute("xnList", Base.getXnndList());// 学年列表
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);
		request.setAttribute("userType", userType);// 用户类型
	}

	/**
	 * 黑名单查询首页
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 */
	public ActionForward hmdgl(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		HttpSession session = request.getSession();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String userType = session.getAttribute("userType").toString();
		String userDep = session.getAttribute("userDep").toString();
		String xydm = "";
		String zydm = "";
		String nj = "";

		String realTable = "qgzx_zgdzdx_hmdb";
		String tableName = "view_qgzx_zgdzdx_hmdb";

		if (userType != null && userType.equalsIgnoreCase("xy")) {
			model.setXydm(userDep);
			xydm = userDep;
		}

		String go = request.getParameter("go");
		if (go != null && !go.equalsIgnoreCase("")) {
			xydm = model.getXydm();
			zydm = model.getZydm();
			nj = model.getNj();
			model.setXm(DealString.toGBK(model.getXm()));
			model.setXq("");
			model.setNd("");
			model.setXn("");

			List rs = service.getHmdInfo(model);
			request.setAttribute("topTr", service.getHmdTopTr());
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rs.size());
		}
		appendProperties(request, xydm, zydm, nj);
		request.setAttribute("realTable", realTable);
		request.setAttribute("tableName", tableName);
		request.setAttribute("path", "qgzxZgdzdx.do?method=hmdgl");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("hmd_main");
	}

	/**
	 * 显示黑名单增加页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 */
	public ActionForward showAddHmd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		request.setAttribute("rs", new QgzxZgdzdxForm());
		return mapping.findForward("addHmd");
	}

	/**
	 * 显示黑名单修改页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 */
	public ActionForward modiHmd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		String pkValue = request.getParameter("pkValue");

		request.setAttribute("rs", service.getOneHmd(pkValue));
		request.setAttribute("type", "modi");
		request.setAttribute("doType", request.getParameter("doType"));		
		return mapping.findForward("addHmd");
	}

	/**
	 * 显示黑名单修改页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 */
	public ActionForward saveHmd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;

		request.setAttribute("result", service.saveHmd(model, request));
		return showAddHmd(mapping, form, request, response);
	}

	/**
	 * 删除黑名单信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 */
	public ActionForward delHmd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String[] values = model.getCbv();
		int result = service.deleteHmd(values, request);

		request.setAttribute("result", result > 0 ? false : true);
		request.setAttribute("mes", "前" + result + "条记录删除成功！");
		return hmdgl(mapping, form, request, response);
	}

	/***************************************************************************
	 * 显示岗位发布信息页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 **************************************************************************/
	public ActionForward showGwxxb(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		QgzxZgdzdxForm model = new QgzxZgdzdxForm();

		model.setXn(Base.currXn);
		model.setXq(Base.currXq);
		model.setNd(Base.currNd);
		model.setSqsj(GetTime.getNowTime2());
		request.setAttribute("doType", "add");
		request.setAttribute("path", "qgzxZgdzdx.do?method=showGwxxb");
		FormModleCommon.commonRequestSet(request);
		request.setAttribute("writeAble", "yes");// writeAble
		request.setAttribute("rs", model);
		return mapping.findForward("gwxxb");
	}

	/***************************************************************************
	 * 保存岗位信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward saveGwxx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		
		model.setSqsj(DealString.toGBK(model.getSqsj()));
		model.setGwmc(DealString.toGBK(model.getGwmc()));
		model.setSqdwmc(DealString.toGBK(model.getSqdwmc()));
		model.setSqdwdz(DealString.toGBK(model.getSqdwdz()));
		model.setGzsj(DealString.toGBK(model.getGzsj()));
		model.setGznr(DealString.toGBK(model.getGznr()));
		model.setGzyq(DealString.toGBK(model.getGzyq()));
		model.setBz(DealString.toGBK(model.getBz()));

		request.setAttribute("rs", model);
		request.setAttribute("result", service.saveGwxx(model, request));// 保存岗位信息
		request.setAttribute("doType", request.getParameter("doType"));
		request.setAttribute("path", "qgzxZgdzdx.do?method=showGwxxb");
		FormModleCommon.commonRequestSet(request);
		request.setAttribute("writeAble", "yes");
		return mapping.findForward("gwxxb");
	}

	/***************************************************************************
	 * 显示修改岗位信息页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 **************************************************************************/
	public ActionForward modiGwxx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String pkValue = request.getParameter("pkValue");
		HashMap<String, String> map = new HashMap<String, String>();
		model.setPkValue(pkValue);

		map = service.getXwgwxx(model);// 查询岗位信息
		request.setAttribute("rs", map);
		request.setAttribute("sqsj", map.get("sqsj"));
		request.setAttribute("doType", "modi");
		request.setAttribute("writeAble", "yes");
		return mapping.findForward("gwxxb");
	}

	/***************************************************************************
	 * 查询岗位信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward gwglSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String userType = request.getSession().getAttribute("userType")
				.toString();
		String go = request.getParameter("go");
		model.setSqdwmc(DealString.toGBK(model.getSqdwmc()));
		if (userType != null && userType.equalsIgnoreCase("xy")) {
			model.setXydm("");
		}

		if (go != null && !go.equalsIgnoreCase("")) {
			List list = service.searchXwgw(model);
			request.setAttribute("rs", list);
			request.setAttribute("rsNum", list.size());
			request.setAttribute("topTr", service.getXwgwToptr());
		}
		request.setAttribute("sqdwList", service.getXwsqdwList());
		request.setAttribute("realTable", "qgzx_xwgwxxb");
		request.setAttribute("tableName", "qgzx_xwgwxxb");
		appendProperties(request, "", "", "");
		request.setAttribute("writeAble", Base.getWriteAble(request));
		return mapping.findForward("xwgwSearch");
	}

	/***************************************************************************
	 * 删除学生岗位信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward delXwgwxx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String[] value = model.getCbv();
		int result = service.deleteXwGwxx(value, request);

		request.setAttribute("result", result > 0 ? false : true);
		request.setAttribute("mes", "前" + result + "条记录删除成功！");
		request.setAttribute("sqdwList", service.getXwsqdwList());
		request.setAttribute("realTable", "qgzx_xwgwxxb");
		request.setAttribute("tableName", "qgzx_xwgwxxb");
		appendProperties(request, "", "", "");
		request.setAttribute("writeAble", Base.getWriteAble(request));
		return mapping.findForward("xwgwSearch");
	}

	/***************************************************************************
	 * 显示岗位申请页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward showGwsq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		HttpSession session = request.getSession();
		String userOnLine = session.getAttribute("userOnLine").toString();
		String userName = session.getAttribute("userName").toString();
		String xh = request.getParameter("xh");
		xh = userOnLine != null && userOnLine.equalsIgnoreCase("student") ? userName
				: xh;
		HashMap<String, String> rs = service.getStuInfo(xh);

		if (!service.checkOutTime()) {
			request.setAttribute("sjFlag", "false");
		}
		request.setAttribute("writeAble", Base.getWriteAble(request));
		request.setAttribute("gwList", service.getXwgwList());
		request.setAttribute("rs",
				rs == null || rs.isEmpty() ? new QgzxZgdzdxForm() : rs);
		return mapping.findForward("sqxwgw");
	}

	/***************************************************************************
	 * 保存岗位申请
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward saveGwsq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String xh = request.getParameter("xh");
		model.setXh(xh);
		boolean flag = false;

		// 判断是否在黑名单中
		if (service.isHmdMember(xh)) {
			request.setAttribute("hmdMember", "true");
		} else {
			flag = service.saveGwsq(model, request);
		}
		
		String pkValue = model.getXn()+model.getNd()+model.getXq()+model.getXh()+model.getGwmc();
		request.setAttribute("result", flag);
		request.setAttribute("writeAble", Base.getWriteAble(request));
		request.setAttribute("gwList", service.getXwgwList());
		request.setAttribute("rs", service.getGwsqInfo(pkValue));
		request.setAttribute("doType", request.getParameter("doType"));
		return mapping.findForward("sqxwgw");
	}

	/***************************************************************************
	 * 岗位申请管理
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward gwsqgl(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HttpSession session = request.getSession();
		String userType = session.getAttribute("userType").toString();
		String userDep = session.getAttribute("userDep").toString();
		String userOnLine = session.getAttribute("userOnLine").toString();
		String userName = session.getAttribute("userName").toString();

		String xydm = model.getXydm();
		String zydm = model.getZydm();
		String nj = model.getNj();
		String go = request.getParameter("go");
		if (userType != null && userType.equalsIgnoreCase("xy")) {
			xydm = userDep;
			model.setXydm(xydm);
		}
		if (userOnLine != null && userOnLine.equalsIgnoreCase("student")) {
			model.setXh(userName);
		}

		if (go != null && !go.equalsIgnoreCase("")) {
			List rs = service.getXwGwsq(model);
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rs.size());
			request.setAttribute("topTr", service.getXwgwsqToptr());
		}
		request.setAttribute("realTable", "xsxwgwxxb");
		request.setAttribute("tableName", "view_xsxwgwxxb");
		appendProperties(request, xydm, zydm, nj);
		return mapping.findForward("gwsqgl");
	}

	/***************************************************************************
	 * 修改岗位申请
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward modiGwsq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		// QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String pkValue = request.getParameter("pkValue");
		request.setAttribute("rs", service.getGwsqInfo(pkValue));

		request.setAttribute("doType", "modi");
		request.setAttribute("gwList", service.getXwgwByOld());
		return mapping.findForward("sqxwgw");
	}

	/***************************************************************************
	 * 删除岗位申请
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward delXwgwxxsq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String[] value = model.getCbv();
		int result = service.deleteXwGwsq(value, request);

		request.setAttribute("result", result > 0 ? false : true);
		request.setAttribute("mes", "前" + result + "条记录删除成功！");
		request.setAttribute("realTable", "xsxwgwxxb");
		request.setAttribute("tableName", "view_xsxwgwxxb");
		appendProperties(request, "", "", "");
		request.setAttribute("writeAble", Base.getWriteAble(request));
		return mapping.findForward("gwsqgl");
	}

	/***************************************************************************
	 * 学生校外岗位申请审核
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward gwsqsh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String userType = request.getSession().getAttribute("userType")
				.toString();
		String userDep = request.getSession().getAttribute("userDep")
				.toString();
		String xydm = model.getXydm();
		String zydm = model.getZydm();
		String nj = model.getNj();
		String go = request.getParameter("go");
		if (userType != null && userType.equalsIgnoreCase("xy")) {
			xydm = userDep;
			model.setXydm(xydm);
		}

		if (go != null && !go.equalsIgnoreCase("")) {
			List rs = service.getXwGwsqSh(model);
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rs.size());
			request.setAttribute("topTr", service.getXwgwsqShToptr());
		}
		request.setAttribute("realTable", "xsxwgwxxb");
		request.setAttribute("tableName", "view_xsxwgwxxb");
		appendProperties(request, xydm, zydm, nj);
		return mapping.findForward("gwsqsh");
	}

	/***************************************************************************
	 * 学生校外岗位申请审核
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward showGwsqsh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		// QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String pkValue = request.getParameter("pkValue");

		request.setAttribute("rs", service.getGwsqshInfo(pkValue));
		request.setAttribute("chkList", service.getChkList());
		request.setAttribute("writeAble", "yes");
		return mapping.findForward("gwsqshPage");
	}

	/***************************************************************************
	 * 学生校外岗位申请审核结果保存
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 **************************************************************************/
	public ActionForward saveXwgwsqsh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;

		request.setAttribute("result", service.saveXwgwsqsh(model, request));
		request.setAttribute("chkList", service.getChkList());
		request.setAttribute("rs", new QgzxZgdzdxForm());
		request.setAttribute("writeAble", "yes");
		return mapping.findForward("gwsqshPage");
	}

	/***************************************************************************
	 * 学生校外岗位申请审核结果保存
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 **************************************************************************/
	public ActionForward showGwxxDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		// QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String pkValue = request.getParameter("pkValue");

		request.setAttribute("rs", service.getGwxxDetail(pkValue));
		return mapping.findForward("gwxxDetail");
	}

	/***************************************************************************
	 * 学院分配人数
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward distributePerson(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String userName = request.getSession().getAttribute("userName").toString();
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String xxdm = StandardOperation.getXxdm();
		String go = request.getParameter("go");
		
		if(Globals.XXDM_GZDX.equalsIgnoreCase(xxdm) || Globals.XXDM_NBTYZYJSXY.equalsIgnoreCase(xxdm)){
			//广州大学   宁波天一
			if (go != null && !go.equalsIgnoreCase("") && StringUtils.isNotNull(model.getXmdm())){
				List<String[]> rs = service.getQgzxxy(model);
				request.setAttribute("rs", rs);
				request.setAttribute("rsNum", rs.size());
				request.setAttribute("topTr", service.getTopTrOfDisperson());
			}else{
				//时间默认为参数设置中的时间
				HashMap<String, String> map = service.getGwsqsjInfo();
				model.setXn(map.get("xn"));
				model.setNd(map.get("nd"));
				model.setXq(map.get("xq"));
			}
		}else{
			if (go != null && !go.equalsIgnoreCase("")) {
				List<String[]> rs = service.getQgzxxy(model);
				request.setAttribute("rs", rs);
				request.setAttribute("rsNum", rs.size());
				request.setAttribute("topTr", service.getTopTrOfDisperson());
			}else{
				//时间默认为参数设置中的时间
				HashMap<String, String> map = service.getGwsqsjInfo();
				model.setXn(map.get("xn"));
				model.setNd(map.get("nd"));
				model.setXq(map.get("xq"));
			}
		}
		request.setAttribute("path", "qgzxZgdzdx.do?method=distributePerson");
		FormModleCommon.commonRequestSet(request);
		appendProperties(request, "", "", "");
		request.setAttribute("gwList", service.getRsfpgwList(userName,"校内",request));
		return mapping.findForward("disPerson");
	}

	/***************************************************************************
	 * 学院分配人数查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward showDistributeP(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		String[] pkValue = request.getParameter("pk").split("!!");
		String xxdm = StandardOperation.getXxdm();
		if(pkValue != null && (Globals.XXDM_GZDX.equalsIgnoreCase(xxdm) || Globals.XXDM_NBTYZYJSXY.equalsIgnoreCase(xxdm)) ){
			//广州大学
			model.setGwdm(pkValue[0]);
			model.setGwsbsj(pkValue[1]);
			model.setXydm(pkValue[2]);
			model.setXn(pkValue[3]);
			model.setNd(pkValue[4]);
			model.setXq(pkValue[5]);
		}else{
			model.setXydm(pkValue[0]);
			model.setXn(pkValue[1]);
			model.setNd(pkValue[2]);
			model.setXq(pkValue[3]);
		}
		
		request.setAttribute("rs", service.queryXyrsfpxx(model));
		return mapping.findForward("distributePage");
	}

	/***************************************************************************
	 * 学院分配人数
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward saveDistribute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;

		// -------------2010/5/13 edit by luojw------------------------
		String xxdm = StandardOperation.getXxdm();
		if (Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)) {
			// 判断所申报人数是否超过该岗位的剩余人数
			String syrs = service.getGwsyrs(model);
			String fprs = model.getFprs();
			if (!Base.isNull(fprs)
					&& (Integer.parseInt(fprs) > Integer.parseInt(syrs))) {
				String msg = "本岗位剩余人数为" + syrs + "人，申报人数超过上限，请确认！";
				request.setAttribute("msg", msg);
			} else {
				request.setAttribute("result", service.saveDistribute(model,
						request));
			}
		} else {
			request.setAttribute("result", service.saveDistribute(model,
					request));
		}
		// ------------ end -----------------------
		request.setAttribute("rs", service.queryXyrsfpxx(model));
		return mapping.findForward("distributePage");
	}

	/***************************************************************************
	 * 显示勤工助学申请页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward qgzxsq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxService qgzxService = new QgzxService();
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		XsgwglService gwglService = new XsgwglService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HttpSession session = request.getSession();
		String userOnLine = session.getAttribute("userOnLine").toString();
		String userName = session.getAttribute("userName").toString();
		String xh = model.getXh();
		String page = "qgzxsq";
		String xxdm = StandardOperation.getXxdm();
		if (userOnLine != null && userOnLine.equalsIgnoreCase("student")) {
			xh = userName;
			model.setXh(xh);
		}
		if(Globals.XXDM_ZGDZDX.equalsIgnoreCase(xxdm)){//中国地质大学
			if (service.isHmdMember(xh)) {
				request.setAttribute("hmdMember", "true");
			}
		}
		if(Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)){//广州大学
			page = "gzdx_qgzxsq";
			//上学期不及格科目；
			//有无受过处分；
			//是否欠交学费、欠缴金额;
			//本人家庭经济状况; 
			//学习情况（即上学期各科成绩）
			gwglService.freeTimeTableGzdx(xh, request);//'空闲时间表'数据
			//申请时间
			request.setAttribute("inTime", qgzxService.getSqsjFlag());
			// -----------2010/5/14 edit by luojw --------------
			List<HashMap<String, String>> gwxzList = qgzxService.getGwxzList();
			request.setAttribute("gwxzList", gwxzList);
			if (gwxzList != null && gwxzList.size() > 0) {
				request.setAttribute("gwxznum", gwxzList.size());
			}
			// -----------end--------------
		}
		request.setAttribute("rs", service.getStuInfo(xh));
		request.setAttribute("zzmmList", service.getZzmmList());
		return mapping.findForward(page);
	}
	
	/***************************************************************************
	 * 显示勤工助学申请修改页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward qgzxsqModi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxService qgzxService = new QgzxService();
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		XsgwglService gwglService = new XsgwglService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String pkValue = request.getParameter("pkValue");
		
		String page = "qgzxsq";
		String xxdm = StandardOperation.getXxdm();
		
		model.setPkValue(pkValue);
		HashMap<String, String> map = service.getQgzxsqInfoOne(model);
		if(Globals.XXDM_ZGDZDX.equalsIgnoreCase(xxdm)){//中国地质大学
			if (service.isHmdMember(map.get("xh"))) {
				request.setAttribute("hmdMember", "true");
			}
		}
		if(Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)){//广州大学
			page = "gzdx_qgzxsq";
			//上学期不及格科目；
			//有无受过处分；
			//是否欠交学费、欠缴金额;
			//本人家庭经济状况; 
			//学习情况（即上学期各科成绩）
			gwglService.freeTimeTableGzdx(map.get("xh"), request);//'空闲时间表'数据
			// -----------2010/5/14 edit by luojw --------------
			List<HashMap<String, String>> gwxzList = qgzxService.getGwxzList();
			request.setAttribute("gwxzList", gwxzList);
			if (gwxzList != null && gwxzList.size() > 0) {
				request.setAttribute("gwxznum", gwxzList.size());
			}
			// -----------end--------------
		}
		map.put("sfpks", qgzxService.isKns(map.get("xh")) ? "是" : "否");
		request.setAttribute("rs", map);
		request.setAttribute("zzmmList", service.getZzmmList());
		return mapping.findForward(page);
	}

	/***************************************************************************
	 * 保存勤工助学申请
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward saveQgzxsq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		XsgwglService gwglService = new XsgwglService();
		QgzxService qgzxService = new QgzxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HashMap<String, String> resultMap = new HashMap<String, String>();		
		String xh = model.getXh();
		String xxdm = StandardOperation.getXxdm();
		String page = "qgzxsq";
		String pkValue = "";

		if (service.isHmdMember(xh)) {
			request.setAttribute("hmdMember", "true");
			request.setAttribute("result", false);
		} else {
			//-----------2010/5/14 edit by luojw --------------
			if (Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)) {// 广州大学
				if(service.checkXnqgzxsq(xh, model.getCheckVal())){
					request.setAttribute("result", service.saveQgzxsqGzdx(model,
							request));
				}else{
					request.setAttribute("bmztj", "true");
				}
				pkValue = model.getXh()+model.getXn()+model.getNd()+model.getXq()+model.getGwxzdm();
			} else {
				request.setAttribute("result", service.saveQgzxsq(model,
						request));
				pkValue = model.getXh()+model.getXn()+model.getNd()+model.getXq()+"##";
			}
			// -----------end--------------
		}
		
		resultMap = service.getStuInfo(xh);
		resultMap.put("lxdh", model.getLxdh());
		
		if(Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)){//广州大学
			page = "gzdx_qgzxsq";
			//上学期不及格科目；
			//有无受过处分；
			//是否欠交学费、欠缴金额;
			//本人家庭经济状况; 
			//学习情况（即上学期各科成绩）
			gwglService.freeTimeTableGzdx(xh, request);// '空闲时间表'数据
			List<HashMap<String, String>> gwxzList = qgzxService.getGwxzList();
			request.setAttribute("gwxzList", gwxzList);
			if (gwxzList != null && gwxzList.size() > 0) {
				request.setAttribute("gwxznum", gwxzList.size());
			}
		}
		
		resultMap.putAll(service.getQgzxsqInfo(pkValue));
		request.setAttribute("rs", resultMap);
		request.setAttribute("zzmmList", service.getZzmmList());
		return mapping.findForward(page);
	}
	
	public ActionForward printGzdxQgzxsqb(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		
		return mapping.findForward("gzdxQgzxsqb");
	}
	
	/***************************************************************************
	 * 勤工助学申请结果查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 **************************************************************************/
	public ActionForward qgzxsqSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxService qgzxService = new QgzxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HttpSession session = request.getSession();
		String userType = session.getAttribute("userType").toString();
		String userDep = session.getAttribute("userDep").toString();
		String go = request.getParameter("go");
		String xydm = model.getXydm();
		String zydm = model.getZydm();
		String nj = model.getNj();
		String yesNo = DealString.toGBK(model.getYesNo());

		if (userType != null && userType.equalsIgnoreCase("xy")) {
			xydm = userDep;
			model.setXydm(xydm);
		}
		if("stu".equalsIgnoreCase(userType)){
			model.setXh(session.getAttribute("userName").toString());
		}

		model.setUserType(userType);
		model.setYesNo(yesNo);

		// ---------2010/5/17 edit by luojw -----------
		String doType = request.getParameter("doType");
		
		if (!Base.isNull(doType) && "save".equalsIgnoreCase(doType)) {
			boolean result = service.saveLsgw(model);
			request.setAttribute("result", result);
		}
		
		request.setAttribute("lsgwList", service.getLsgwList());
		// ---------end -----------
		if (go != null && !go.equalsIgnoreCase("")) {
			List<String[]> rs = service.queryQgzxsqb(model);
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rs.size());
			request.setAttribute("topTr", service.getQgzxsqTopTr());
		}
		
		request.setAttribute("path", "qgzxZgdzdx.do?method=qgzxsqSearch");
		FormModleCommon.commonRequestSet(request);
		request.setAttribute("tableName", "view_qgzxsqb");
		request.setAttribute("realTable", "qgzxsqb");
		request.setAttribute("gwxzList", qgzxService.getGwxzList());
		appendProperties(request, xydm, zydm, nj);
		request.setAttribute("getChkList", service.getChkList());
		return mapping.findForward("qgzxsqSearch");
	}
	
	/***************************************************************************
	 * 勤工助学申请信息删除
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 **************************************************************************/
	public ActionForward delQgzxsq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		request.setAttribute("result", service.delQgzxsq(model));
		return qgzxsqSearch(mapping, form, request, response);
	}
	
	/**
	 * 导出学生工作考核信息
	 * @param ActionMapping mapping
	 * @param ActionForm form
	 * @param HttpServletRequest request
	 * @param HttpServletResponse response
	 * @return ActionForward
	 * @throws Exception 
	 * */
	public ActionForward expXsqgzxsq(ActionMapping mapping, ActionForm form,HttpServletRequest request,
			HttpServletResponse response) throws  Exception{
		QgzxZgdzdxForm model = (QgzxZgdzdxForm)form;
		HttpSession session = request.getSession();
		QgzxZgdzdxService service = new QgzxZgdzdxService(); 
		String xxdm = StandardOperation.getXxdm();
		String userName = session.getAttribute("userName").toString();
		model.setUserName(userName);
		String[] colList = {"xh","xm","xb","xn","xq","xqmc","nd","nj","xydm","xymc","zydm","zymc","bjdm","bjmc","yhtc","kcjqgzxsj","lxdh","sqly","xxsh","xysh","bz"};
		if(Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)){
			//广州大学
			colList = new String[]{"xh","xm","xb","xn","xq","xqmc","nd","nj","xydm","xymc","zydm","zymc","bjdm","bjmc","gwxzdm","gwxzmc","yhtc","jjqk","kcsgz","lxdh","xxsh","xysh","bz"};
		}
		
		String[] colListCN = service.getColumnNameCN(colList, "view_qgzxsqb");
		List<String[]> rs = service.queryXsqgzxsqForExport(model,colList);//查询学生勤工助学申请信息
		
		response.reset();
		response.setContentType("application/vnd.ms-excel");		
		Excel2Oracle.exportData(rs,colList,colListCN, response.getOutputStream());
		return mapping.findForward("");
	}
	
	/***************************************************************************
	 * 勤工助学申请审核
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 **************************************************************************/
	public ActionForward qgzxsqAudi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxService qgzxService = new QgzxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HttpSession session = request.getSession();
		String userType = session.getAttribute("userType").toString();
		String userDep = session.getAttribute("userDep").toString();
		String go = request.getParameter("go");
		String xydm = model.getXydm();
		String zydm = model.getZydm();
		String nj = model.getNj();

		if (userType != null && userType.equalsIgnoreCase("xy")) {
			xydm = userDep;
			model.setXydm(xydm);
		}
		
		model.setUserType(userType);

		if (go != null && !go.equalsIgnoreCase("")) {
			List<String[]> rs = service.selectQgzxsqshInfo(model);
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rs.size());
			request.setAttribute("topTr", service.getQgzxsqTopTr());
		}
		if(!Globals.XXDM_ZGDZDX.equalsIgnoreCase(Base.xxdm)){
			if("xx".equalsIgnoreCase(userType) || "admin".equalsIgnoreCase(userType)){
				model.setXysh("通过");
			}
		}

		request.setAttribute("gwxzList", qgzxService.getGwxzList());
		request.setAttribute("tableName", "view_qgzxsqb");
		appendProperties(request, xydm, zydm, nj);
		request.setAttribute("path", "qgzxZgdzdx.do?method=qgzxsqAudi");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("qgzxsqAudi");
	}

	/***************************************************************************
	 * 显示勤工助学申请审核页面 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 **************************************************************************/
	public ActionForward showQgzxsqsh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		QgzxZgdzdxForm model = new QgzxZgdzdxForm();
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		XsgwglService gwglService = new XsgwglService();
		QgzxService qgzxService = new QgzxService();
		String pkValue = request.getParameter("pkValue");
		String userType = session.getAttribute("userType").toString();
		String userName = session.getAttribute("userName").toString();
		String xxdm = StandardOperation.getXxdm();
		String isFdy=session.getAttribute("isFdy").toString();
		HashMap<String, String> map = new HashMap<String, String>();
		String page  = "qgzxsqsh";
		// String writeAble = Base.getWriteAble(request);

		// ================begin 骆嘉伟 2009/3/25 ==================
		String tp = request.getParameter("tp");
		if ("zjfp".equals(tp)) {
			pkValue = pkValue.replace(" ", "");
		}
		model.setPkValue(pkValue);
		model.setUserType(userType);
		if("xy".equalsIgnoreCase(userType)){
			//广州大学学院用户
			model.setXydm(session.getAttribute("userDep").toString());
		}
		
		
		if ("zjfp".equals(tp)) {
			request.setAttribute("tp", "zjfp");
			map = service.getQgzxsqZjfp(model);
		} else {
			map = service.getQgzxsqInfo(model);
		}
		// ================end 骆嘉伟 2009/3/25 ==================
		if(Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)){
			//广州大学
			//学生空余时间
			if("不通过".equalsIgnoreCase(map.get("xxsh")) 
					|| "通过".equalsIgnoreCase(map.get("xxsh"))){
				request.setAttribute("cansee","no");
			}
			gwglService.freeTimeTableGzdx(map.get("xh"), request);//'空闲时间表'数据
			request.setAttribute("gwxzList", qgzxService.getGwxzList());
			//学生成绩信息
			request.setAttribute("cjrs", gwglService.queryXscj(map.get("xh")));
			//学生违纪信息
			request.setAttribute("wjrs", gwglService.queryXswj(map.get("xh")));
			//岗位列表
			if(StringUtils.isNotNull(map.get("gwxzmc"))){
				request.setAttribute("gwList", service.getRsfpgwList(userName,map.get("gwxzmc"),request));
			}else{
				request.setAttribute("gwList", service.getGwList());
			}
			//是否欠交学费、欠缴金额
			page = "gzdx_qgzxsqsh";
		}
		if("true".equalsIgnoreCase(isFdy)){
			request.setAttribute("fdyname",service.getFdyXm(userName));
		}
		request.setAttribute("rs", map);
		request.setAttribute("chkList", service.getChkList());
		request.setAttribute("zzmmList", service.getZzmmList());
		request.setAttribute("writeAble", "yes");// writeAble
		return mapping.findForward(page);
	}

	/***************************************************************************
	 * 保存勤工助学申请审核信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 **************************************************************************/
	public ActionForward saveQgzxsqsh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String userType = session.getAttribute("userType").toString();
		String isFdy =session.getAttribute("isFdy").toString();
		String xxdm = StandardOperation.getXxdm();
		boolean result = false;
		model.setIsFdy(isFdy);
		model.setUserType(userType);
		if(xxdm.equalsIgnoreCase(Globals.XXDM_GZDX)){
			//广州大学
			result = service.saveQgzxsqshByGzdx(model,request);
		}else{
			result = service.saveQgzxsqsh(model, request);
		}
		request.setAttribute("result", result);
		request.setAttribute("chkList", service.getChkList());
		return mapping.findForward("qgzxsqsh");
	}

	/***************************************************************************
	 * 勤工助学学校分配岗位
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward showGwfp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxForm model = new QgzxZgdzdxForm();
		HttpSession session = request.getSession();
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxService qgzxService = new QgzxService();
		String userName = session.getAttribute("userName").toString();
		String userType = session.getAttribute("userType").toString();

		model.setUserName(userName);
		model.setUserType(userType);
		String xydm = model.getXydm();
		String zydm = model.getZydm();
		String nj = model.getNj();
		// ============begin 骆嘉伟 2009/3/26 ==================
		List apList = service.getApList();
		List sqList = service.getSqList();
		request.setAttribute("apList", apList);
		request.setAttribute("sqList", sqList);
		// ============end 骆嘉伟 2009/3/26 ==================

		boolean flag = service.checkAllow(model);// 检测是否在可直接分配岗位的时间以内

		HashMap<String, String> paramter = new HashMap<String, String>();
		paramter.put("userName", userName);
		paramter.put("xn", model.getXn());
		paramter.put("nd", model.getNd());
		paramter.put("xq", model.getXq());
		paramter.put("yrdwdm", model.getYrdwdm());
		paramter.put("gwxzdm", model.getGwxz());
		
		
		request.setAttribute("gwList",qgzxService.getGwmcxxList(paramter,"no"));//所有审核通过岗位列表
		appendProperties(request, xydm, zydm, nj);
		request.setAttribute("yrdwList", qgzxService.getYrdwList(userName));//用人单位列表
		request.setAttribute("allow", flag);
//		request.setAttribute("gwList", qgzxService.getYrdwGwList(userName,model.getYrdwdm(),model.getGwxzdm(),true));
		request.setAttribute("path", "qgzxZgdzdx.do?method=showGwfp");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("gwfp");
	}

	/***************************************************************************
	 * 岗位分配查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward searchGwfp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxService qgzxService = new QgzxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String userName = session.getAttribute("userName").toString();
		String userType = session.getAttribute("userType").toString();

		String xydm = model.getXydm();
		String zydm = model.getZydm();
		String nj = model.getNj();
		String sfygw = DealString.toGBK(model.getSfygw());
		String gwdm = DealString.toGBK(model.getGwdm());
		String xm = DealString.toGBK(model.getXm());
		String yrdwdm = model.getYrdwdm();

		model.setXm(xm);
		model.setSfygw(sfygw);
		model.setUserName(userName);
		model.setUserType(userType);
		model.setGwdm(gwdm);
		model.setYrdwdm(yrdwdm);

		List rs = service.getGwzjfpList(model);
		
		int count = service.selectGwzjfpXxNum(model);
		model.getPages().setMaxRecord(Integer.parseInt(String.valueOf(rs.size())));//设置最大的记录数

		// ============begin 骆嘉伟 2009/3/26 ==================
		List apList = service.getApList();
		List sqList = service.getSqList();
		request.setAttribute("apList", apList);
		request.setAttribute("sqList", sqList);
		// ============end 骆嘉伟 2009/3/26 ==================

		HashMap<String, String> paramter = new HashMap<String, String>();
		paramter.put("userName", userName);
		paramter.put("xn", model.getXn());
		paramter.put("nd", model.getNd());
		paramter.put("xq", model.getXq());
		paramter.put("yrdwdm", model.getYrdwdm());
		paramter.put("gwxzdm", model.getGwxz());
		
		
		request.setAttribute("gwList",qgzxService.getGwmcxxList(paramter,"yes"));//所有审核通过岗位列表
		request.setAttribute("topTr", service.getGwzjfpTopTr());
		request.setAttribute("rs", rs);
		request.setAttribute("rsNum", rs.size());
		appendProperties(request, xydm, zydm, nj);
		request.setAttribute("yrdwList", service.getYrdwList());//用人单位列表
		request.setAttribute("allow", true);
//		request.setAttribute("gwList", service.getGwList());
		request.setAttribute("path", "qgzxZgdzdx.do?method=showGwfp");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("gwfp");
	}

	/***************************************************************************
	 * 显示岗位分配页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward showGwfpPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		HttpSession session = request.getSession();
		HashMap<String, String> time = service.getGwsqsjInfo();

		String pkString = DealString.toGBK(request.getParameter("pkString"));
		String userName = session.getAttribute("userName").toString();
		String userType = session.getAttribute("userName").toString();

		model.setUserName(userName);
		model.setUserType(userType);

		request.setAttribute("xn", time.get("xn"));
		request.setAttribute("nd", time.get("nd"));
		request.setAttribute("xq", time.get("xq"));
		request.setAttribute("yrdwList", service.getYrdwList());
		request.setAttribute("gwList", service.getKfpgwList(model));
		request.setAttribute("pk", pkString);
		return mapping.findForward("gwfpPage");
	}

	/***************************************************************************
	 * 保存岗位分配信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward saveGwfp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		QgzxZgdzdxService service = new QgzxZgdzdxService();

		String pk = DealString.toGBK(request.getParameter("pk"));
		String userName = session.getAttribute("userName").toString();
		String userType = session.getAttribute("userType").toString();

		boolean flag = false;

		model.setUserName(userName);
		model.setUserType(userType);
		model.setPk(pk);
		model.setGwdm(DealString.toGBK(model.getGwdm()));
		flag = service.saveGwfp(model, request);

		request.setAttribute("result", flag);
		return showGwfpPage(mapping, form, request, response);
	}

	/***************************************************************************
	 * 显示勤工助学申请审核页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward qgzxzx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HttpSession session = request.getSession();
		String userOnLine = session.getAttribute("userOnLine").toString();
		String userName = session.getAttribute("userName").toString();
		String xh = model.getXh();
		if (userOnLine != null && userOnLine.equalsIgnoreCase("student")) {
			xh = userName;
			model.setXh(xh);
		}
		appendProperties(request, "", "", "");
		request.setAttribute("rs", service.getStuInfo(xh));
		return mapping.findForward("qgzxzx");
	}

	/***************************************************************************
	 * 保存勤工助学之星申请
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward saveQgzxzx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		XsxxglService xsxxglService = new XsxxglService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String xh = request.getParameter("xh");
		model.setXh(xh);
		model.setZwjd(DealString.toGBK(model.getZwjd()));
		boolean flag = false;

		flag = service.saveQgzxzx(model, request);// 保存勤工助学之星申请信息

		HashMap<String, String> map = xsxxglService.selectStuinfo(xh);
		map.put("xn", model.getXn());
		map.put("xq", model.getXq());
		map.put("nd", model.getNd());
		map.put("zwjd", model.getZwjd());
		request.setAttribute("result", flag);
		request.setAttribute("writeAble", Base.getWriteAble(request));
		request.setAttribute("rs", map);
		appendProperties(request, "", "", "");
		request.setAttribute("doType",request.getParameter("doType"));
		return mapping.findForward("qgzxzx");
	}

	/***************************************************************************
	 * 查询勤工助学之星申请查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward qgzxzxSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HttpSession session = request.getSession();
		String userType = session.getAttribute("userType").toString();
		String userDep = session.getAttribute("userDep").toString();
		String userName = session.getAttribute("userName").toString();
		String xh = request.getParameter("xh");
		String go = request.getParameter("go");
		model.setXh(xh);
		List rs = null;

		if (userType != null && userType.equalsIgnoreCase("xy")) {
			model.setXydm(userDep);
		} else if (userType != null && userType.equalsIgnoreCase("stu")) {
			// 学生登录
			xh = userName;
			model.setXh(xh);
		}

		if (go != null && !"".equalsIgnoreCase(go)) {
			rs = service.qgzxzxSearch(model);// 保存勤工助学之星申请信息
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rs.size());
			request.setAttribute("topTr", service.getQgzxzxToptr());
		}
		request.setAttribute("realTable", "qgzxzxsqb");
		request.setAttribute("tableName", "view_qgzxzx");
		request.setAttribute("writeAble", Base.getWriteAble(request));
		appendProperties(request, "", "", "");
		return mapping.findForward("qgzxzxSearch");
	}

	/***************************************************************************
	 * 查询勤工助学之星修改
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward modiQgzxzx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		String pkValue = DealString.toGBK(request.getParameter("pkValue"));

		request.setAttribute("rs", service.getQgzxzxInfo(pkValue));
		request.setAttribute("doType", "modi");
		appendProperties(request, "", "", "");
		return mapping.findForward("qgzxzx");
	}

	/***************************************************************************
	 * 删除勤工助学之星信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward delQgzxzx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		String[] values = model.getCbv();
		int result = service.deleteQgzxzx(values, request);

		request.setAttribute("result", result > 0 ? false : true);
		request.setAttribute("mes", "前" + result + "条记录删除成功！");
		appendProperties(request, "", "", "");
		return mapping.findForward("qgzxzxSearch");
	}

	/***************************************************************************
	 * 勤工助学之星审核查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward qgzxzxsh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HttpSession session = request.getSession();
		String userType = session.getAttribute("userType").toString();
		String userDep = session.getAttribute("userDep").toString();
		String userName = session.getAttribute("userName").toString();

		String xydm = model.getXydm();
		String zydm = model.getZydm();
		String nj = model.getNj();
		String go = request.getParameter("go");
		if (userType != null && userType.equalsIgnoreCase("xy") && !service.isYrdwUser(userName)) {
			xydm = userDep;
			model.setXydm(xydm);
		} else if (userType != null && userType.equalsIgnoreCase("stu")) {
			model.setXh(userName);
		}

		if (go != null && !go.equalsIgnoreCase("")) {
			List<String[]> rs = service.getQgzxzxSh(model, userType, userName);
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rs == null ? "0" : rs.size());
			request.setAttribute("topTr", service.getQgzxzxShTopTr());
		}
		request.setAttribute("realTable", "qgzxzxsqb");
		request.setAttribute("tableName", "view_qgzxzx");
		appendProperties(request, xydm, zydm, nj);
		return mapping.findForward("qgzxzxsh");
	}

	/***************************************************************************
	 * 显示勤工助学之星审核页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward showQgzxzxsh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxService qgzxService = new QgzxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HttpSession session = request.getSession();
		String userType = session.getAttribute("userType").toString();
		String userName = session.getAttribute("userName").toString();
		String userDep = session.getAttribute("userDep").toString();
		String pkValue = DealString.toGBK(request.getParameter("pkValue"));
		if (userType != null && userType.equalsIgnoreCase("xy")) {
			model.setXydm(userDep);
		}
		userType = "admin".equalsIgnoreCase(userType) ? "xx" : userType;

		request.setAttribute("rs", service.getQgzxzxShInfo(pkValue, userType,userName));
		request.setAttribute("chkList", service.getChkList());
		request.setAttribute("writeAble", "yes");
		request.setAttribute("userType", userType);
		request.setAttribute("yrdwUser", qgzxService.isYrdwUser(userName));
		return mapping.findForward("qgzxzxshPage");
	}

	/***************************************************************************
	 * 保存勤工助学之星审核结果
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward qgzxzxshSave(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HttpSession session = request.getSession();
		String userType = session.getAttribute("userType").toString();
		String userName = session.getAttribute("userName").toString();

		request.setAttribute("result", service.saveQgzxzxsh(model, userType,
				userName, request));
		
		//return showQgzxzxsh(mapping, form, request, response);
		request.setAttribute("rs",  service.getQgzxzxShInfo(model.getXh()+model.getXn()+model.getNd()+model.getXq(), userType,userName));
		
		request.setAttribute("chkList", service.getChkList());
		request.setAttribute("writeAble", "yes");		
		return mapping.findForward("qgzxzxshPage");
	}

	/***************************************************************************
	 * 勤工助学之星批量审核
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward batchQgzxzxSh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		HttpSession session = request.getSession();
		String userType = session.getAttribute("userType").toString();
		String userName = session.getAttribute("userName").toString();
		String[] values = model.getCbv();
		String yesNo = DealString.toGBK(request.getParameter("yesNo"));

		request.setAttribute("result", service.batchQgzxzxsh(values, userType,
				userName, yesNo, request));
		request.setAttribute("realTable", "qgzxzxsqb");
		request.setAttribute("tableName", "view_qgzxzx");
		appendProperties(request, "", "", "");
		return mapping.findForward("qgzxzxsh");
	}

	/***************************************************************************
	 * 酬金发放审核
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward saveWorkPayAudit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;

		request.setAttribute("result", service.saveWorkPayAudit(request));
		request.setAttribute("rs", model);
		return new ActionForward("/whlggwgl.do?method=cjffAudit", false);
	}

	/***************************************************************************
	 * 酬金发放报表打印
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 **************************************************************************/
	public ActionForward printWorkPay(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		String nd = request.getParameter("nd");
		String yf = request.getParameter("yf");

		String modelPath = servlet.getServletContext().getRealPath("")
				+ "/print/zgdzdx/zgdzdxcjffb.xls";
		response.reset();
		response.setContentType("application/vnd.ms-excel");
		WritableWorkbook wwb = ExcelMethods.getWritableWorkbook(new File(
				modelPath), response.getOutputStream());
		service.printWorkPay(wwb, nd, yf);
		return mapping.findForward("");
	}

	/**
	 * 查看岗位详细信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward showPostDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String pkValue = DealString.toGBK(request.getParameter("pkValue"));
		QgzxService service = new QgzxService();

		request.setAttribute("rs", service.getPostDetail(pkValue));
		return new ActionForward("/qgzx/zgdzdx/zgdzdx_gwxx_detail.jsp", false);
	}

	/**
	 * 勤工助学申请批量审核 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 */
	public ActionForward saveQgzxshBatch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		QgzxZgdzdxForm model = new QgzxZgdzdxForm();
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		HttpSession session = request.getSession();
		String yesNo = DealString.toGBK(request.getParameter("yesNo"));
		String pkString = DealString.toGBK(request.getParameter("pkString"));
		String xmdm = request.getParameter("xmdm");
		String gwdm = request.getParameter("gwdm"); 
		String userType = session.getAttribute("userType").toString();
		String xxdm = StandardOperation.getXxdm();
		String isFdy =session.getAttribute("isFdy").toString();
		String userName =session.getAttribute("userName").toString();
		if("true".equalsIgnoreCase(isFdy)){
			model.setFdyname(service.getFdyXm(userName));
		}
		boolean result = false;
		model.setIsFdy(isFdy);
		model.setPk(pkString);
		model.setUserType(userType);
		model.setXmdm(xmdm);
		model.setGwdm(gwdm);
		if(Globals.XXDM_GZDX.equalsIgnoreCase(xxdm)){
			//广州大学
			result = service.saveQgzxshBatchByGzdx(model, yesNo, request);
		}else{
			result = service.saveQgzxshBatch(model, yesNo, request);
		}
		request.setAttribute("result", result);
		model.setGwdm("");
		return qgzxsqAudi(mapping, model, request, response);
	}

	/**
	 * 显示数据导出页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward showExportPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		String userType = session.getAttribute("userType").toString();

		model.setUserType(userType);
		model.setSfygw(DealString.toGBK(model.getSfygw()));
		model.setGwdm(DealString.toGBK(model.getGwdm()));

		String whereSql = service.getExportGwzjfpSql(model);
		List list = service.getColumn2ExportGwzjfp();// 获取所有的字段列表

		request.setAttribute("whereSql", whereSql);
		request.setAttribute("rs", list);
		request.setAttribute("realTable", "qgzxsqb");
		request.setAttribute("tableName", "view_qgzxsqb");
		return mapping.findForward("exportGwzjfp");
	}

	/**
	 * 数据导出
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 */
	public ActionForward expData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		QgzxZgdzdxForm model = (QgzxZgdzdxForm) form;
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		String mappingItems = DealString.toGBK(request
				.getParameter("mappingItems"));
		String whereSql = DealString.toGBK(request.getParameter("whereSql"));
		String userType = session.getAttribute("userType").toString();
		String userName = session.getAttribute("userName").toString();

		model.setUserType(userType);
		model.setUserName(userName);

		whereSql = whereSql == null || whereSql.equals("") ? "" : whereSql;// 条件语句
		String[] key = mappingItems.split("!!SplitOne!!");// 所有用户选择的导出字段
		String sql = "";
		String tableName = "view_qgzxsqb";
		sql = service.getColumnSql2Exp(key, model);// 获取导出的查询语句

		sql += whereSql;// 添加条件
		response.reset();
		response.setContentType("application/vnd.ms-excel");
		Excel2Oracle.exportData(sql, tableName, response.getOutputStream());// 将数据写到Excel文件
		return mapping.findForward("");
	}
	
	public ActionForward xxts(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		String tableName = "zgdzdx_qgzx_xxts";
		String[] outputColumn = new String[] {"pkValue","kssj","jssj","tsnr"};
		String doType = request.getParameter("doType");
		
		
		if (!Base.isNull(doType) && "query".equals(doType)) {
			this.selectPageDataByPagination(request, form, tableName, tableName, outputColumn);
		}
		
		if (!Base.isNull(doType) && "del".equals(doType)) {
			this.deleteOperation(request, tableName);
		}
		
		if (!Base.isNull(doType) && "expData".equals(doType)) {
			this.expPageData(request, response, tableName, tableName, outputColumn);
			return mapping.findForward("");
		}
		
		request.setAttribute("realTable",tableName );
		request.setAttribute("path", "qgzxZgdzdx.do?method=xxts");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("xxts");
	}

	
	public ActionForward xxtsUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		String tableName = "zgdzdx_qgzx_xxts";
		String doType = request.getParameter("doType");
		String pkValue = request.getParameter("pk");
		
		if (!Base.isNull(pkValue)) {
			this.selectPageDataByOne(request, tableName, tableName, pkValue);
		}
		
		if (!Base.isNull(doType) && "save".equals(doType)) {
			this.insertOperation(request, tableName);
		}
		
		if (!Base.isNull(doType) && "update".equals(doType)) {
			this.updateOperation(request, tableName);
		}
		
		request.setAttribute("pkValue", pkValue);
		request.setAttribute("path", "qgzxZgdzdx.do?method=xxts");
		FormModleCommon.commonRequestSet(request);
		request.setAttribute("doType", doType);
		return mapping.findForward("xxtsUpdate");
	}
	
	/**
	 * 勤工助学之星打印报表
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward qgzxzxPrint(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
		String xh = request.getParameter("xh");
		String xn = request.getParameter("xn");
		String nd = request.getParameter("nd");
		String xq = request.getParameter("xq");
		String zwjd = request.getParameter("zwjd");
		HashMap<String, String> param = new HashMap<String, String>();
		param.put("xh", xh);
		param.put("nd", nd);
		param.put("xn", xn);
		param.put("xq", xq);
		QgzxZgdzdxService service = new QgzxZgdzdxService();
		HashMap<String, String> rs = service.qgzxzsPrint(param);
		rs.put("zwjd", zwjd);
		request.setAttribute("rs", rs);
		return mapping.findForward("qgzxzxPrint");
	}
}