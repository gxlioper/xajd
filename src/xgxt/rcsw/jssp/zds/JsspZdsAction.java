/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package xgxt.rcsw.jssp.zds;

import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import xgxt.DAO.DAO;
import xgxt.DAO.XszzDao;
import xgxt.action.Base;
import xgxt.action.BaseAction;
import xgxt.daoActionLogic.StandardOperation;
import xgxt.studentInfo.service.XsxxglService;
import xgxt.utils.FormModleCommon;
import xgxt.utils.GetTime;

/** 
 * MyEclipse Struts
 * Creation date: 12-15-2010
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class JsspZdsAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * 走读生申请
	 * Method zdsSq
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward zdsSq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		JsspZdsForm zdsForm=(JsspZdsForm)form;
		String doType=request.getParameter("doType");
		XsxxglService xsxxglService=new XsxxglService();
		JsspZdsService service=new JsspZdsService();
		
		HttpSession session=request.getSession();
		HashMap<String,String>hashMap=new HashMap<String,String>();
		String userType=session.getAttribute("userType").toString();
		String userName=session.getAttribute("userName").toString();
		String userDep=session.getAttribute("userDep").toString();
		String tabName="rcsw_jssp_zds";
		zdsForm.setUserDep(userDep);
		
		if("stu".equalsIgnoreCase(userType)){
			hashMap.putAll(xsxxglService.selectStuinfo(userName));
			request.setAttribute("rs", hashMap);
		}
		
		if("save".equalsIgnoreCase(doType)){
			HashMap<String,String>xy=xsxxglService.selectStuinfo(zdsForm.getSave_xh());
			zdsForm.setSave_xydm(xy.get("xydm"));
			if(service.checkSqsj(zdsForm)){
				this.insertOperation(request, tabName);
				String pkValue=zdsForm.getSave_xh()+zdsForm.getSave_sqsj();
				//保存后查询
				this.selectPageDataByOne(request, tabName, tabName, pkValue);
				hashMap.putAll((HashMap<String,String>)request.getAttribute("rs"));
				hashMap.putAll(xsxxglService.selectStuinfo(hashMap.get("xh")));
				request.setAttribute("rs", hashMap);
				request.setAttribute("pkValue", pkValue);
				
			}else{
				
				request.setAttribute("dontSq", "true");
			}
			doType="add";
		}
		request.setAttribute("doType", doType);
		request.setAttribute("nowTime", GetTime.getNowTime2());
		request.setAttribute("path", "jsspZds.do?method=zdsSq&doType=add");
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("zdsSq");
	}
	
	/**
	 * 走读生查询
	 * method zdsCx
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward zdsCx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session=request.getSession();
		JsspZdsForm zdsForm=(JsspZdsForm)form;
		
		String userType=session.getAttribute("userType").toString();
		String doType=request.getParameter("doType");
		String tableName="rcsw_jssp_zds";
		String viewName="view_rcsw_jssp_zds";
		if("del".equalsIgnoreCase(doType)){
			this.deleteOperation(request, tableName);
			doType="query";
		}
		
		if("query".equalsIgnoreCase(doType)){
			//增加申请时间判断
			zdsForm.setDoType(doType);
			zdsForm.setUserType(userType);
			getSqsjQuery(request,zdsForm);
			setDisabled(request,zdsForm);
			String outputColumn[]={"pkValue","disabled","xh","xm","nj","xymc","zymc","bjmc","sqsj","xysh","xxsh"};
			this.selectPageDataByPagination(request,zdsForm, tableName, viewName, outputColumn);
		}
		
		request.setAttribute("path", "jsspZds.do?method=zdsCx");
		FormModleCommon.commonRequestSet(request);
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);
		return mapping.findForward("zdsCx");
	}
	
	/**
	 * 走读生批量审核
	 * method zdsSh
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward zdsSh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session=request.getSession();
		JsspZdsForm zdsForm=(JsspZdsForm)form;
		
		String tableName="rcsw_jssp_zds";
		String viewName="view_rcsw_jssp_zds";
		
		String doType=request.getParameter("doType");
		String userType=session.getAttribute("userType").toString();
		
		if("sh".equalsIgnoreCase(doType)){
			String shjg=request.getParameter("shjg");
			zdsForm.setShjg(shjg);
			HashMap<String,String>valueMap=getValueMap(request, zdsForm);
			HashMap<String, String[]> primaryMap = getValueArrayMap(request, PRIFIX_PRIMARY_KEY);
			this.auditingBatchOperation(request, primaryMap, valueMap, tableName);
			doType="shqry";
		}
		
		if("shqry".equalsIgnoreCase(doType)){
			//增加申请时间判断
			zdsForm.setDoType(doType);
			zdsForm.setUserType(userType);
			getSqsjQuery(request,zdsForm);
			setDisabled(request,zdsForm);
			String outputColumn[]={"pkValue","disabled","xh","xm","nj","xymc","zymc","bjmc","sqsj","xysh","xxsh"};
			this.selectPageDataByPagination(request,zdsForm, tableName, viewName, outputColumn);
		}
		
		request.setAttribute("path", "jsspZds.do?method=zdsSh");
		FormModleCommon.commonRequestSet(request);
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);
		return mapping.findForward("zdsSh");
	}
	
	
	/** 
	 * 走读生单条记录
	 * Method zdsSq
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward zdsOne(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		JsspZdsForm zdsForm=(JsspZdsForm)form;
		
		String doType=request.getParameter("doType");
		String pkValue=request.getParameter("pkValue");
		String write=request.getParameter("write");
		XsxxglService xsxxglService=new XsxxglService();
		String tabName="rcsw_jssp_zds";
		
		if(!"".equalsIgnoreCase(doType)){
			//查询一条记录
			this.selectPageDataByOne(request, tabName, tabName, pkValue);
			HashMap<String,String>hashMap=(HashMap<String,String>)request.getAttribute("rs");
			hashMap.putAll(xsxxglService.selectStuinfo(hashMap.get("xh")));
			request.setAttribute("pkValue", pkValue);
		}
		
		if("update".equalsIgnoreCase(doType)){
			this.updateOperation(request, tabName);
		}
		request.setAttribute("nowTime", GetTime.getNowTime2());
		request.setAttribute("doType", doType);
		request.setAttribute("path", "jsspZds.do?method=zdsSq&doType=add");
		request.setAttribute("write", write);
		FormModleCommon.commonRequestSet(request);
		return mapping.findForward("zdsSq");
	}
	
	/**
	 * 信息导出
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * */
	public ActionForward expDate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String tableName="rcsw_jssp_zds";
		String viewName="view_rcsw_jssp_zds";
		
		try {
			this.expPageData(request, response, tableName, viewName, null);
		} catch (Exception e) {
			e.printStackTrace();
		}			
		return mapping.findForward("success");
	}

	
	/**
	 * 修改权限控制
	 */
	public void setDisabled(HttpServletRequest request,JsspZdsForm zdsForm){
		
		String userType=zdsForm.getUserType();
		if("xx".equalsIgnoreCase(userType) || "admin".equalsIgnoreCase(userType)){
			request.setAttribute("clientColumns", " '' disabled, ");
		}else if("xy".equalsIgnoreCase(userType)){//学院用户读写权控制
			request.setAttribute("clientColumns", " (case when (xxsh='通过' or xxsh='不通过') then 'disabled' end)disabled, ");
			
		}else {//非学院、学校用户
			request.setAttribute("clientColumns", " (case when (xysh='通过' or xysh='不通过')  then 'disabled' end)disabled, ");
		}
	}
	
	
	/**
	 * 查询条件控制
	 *
	 */
	public void getSqsjQuery(HttpServletRequest request,JsspZdsForm zdsForm){
		StringBuilder sql=new StringBuilder();
		if(!"".equalsIgnoreCase(zdsForm.getKssj()) && null!=zdsForm.getKssj()){
			sql.append(" and sqsj >= "+zdsForm.getKssj());
		}
		if(!"".equalsIgnoreCase(zdsForm.getJssj()) && null!=zdsForm.getJssj()){
			sql.append(" and sqsj <= "+zdsForm.getJssj());
		}
		if("shqry".equalsIgnoreCase(zdsForm.getDoType())){
			String userType=zdsForm.getUserType();
			if("xx".equalsIgnoreCase(userType) || "admin".equalsIgnoreCase(userType)){
				sql.append(" and xysh='通过' ");
			}
		}
		request.setAttribute("annexTerm", sql.toString());
	}
	
	
	/**
	 * 审核字段保存
	 * 
	 */
	public HashMap<String,String>getValueMap(HttpServletRequest request,
			JsspZdsForm zdsForm){
		HttpSession session=request.getSession();
		HashMap<String,String>valueMap=new HashMap<String,String>();
		
		String userType=session.getAttribute("userType").toString();
		String shzd="";
		String shsj="";
		if("xy".equalsIgnoreCase(userType)){
			shzd="xysh";
			shsj="xyshsj";
		}else if("admin".equalsIgnoreCase(userType)
				|| "xx".equalsIgnoreCase(userType)){
			shzd="xxsh";
			shsj="xxshsj";
		}
		valueMap.put(shzd, zdsForm.getShjg());
		valueMap.put(shsj,GetTime.getNowTime2());
		return valueMap;
	}
	
	/**
	 * @describe 申请时间设定
	 * @method sqsjSz
	 * @return
	 * @throws Exception 
	 */
	public ActionForward sqsjSz(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		
		String doType= request.getParameter("doType");
		
		String tableName="rcsw_jssp_sjsz";
		String viewName="view_rcsw_jssp_sjsz";
		if("query".equalsIgnoreCase(doType)){
			String[]outputColumn={"pkValue","xymc","sqkssj","sqjssj"};
			this.selectPageData(request, tableName, viewName, outputColumn);
		}
		
		request.setAttribute("path", "jsspZds.do?method=sqsjSz");
		FormModleCommon.commonRequestSet(request);
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);
		return mapping.findForward("sqsjSz");
	}
	
	/**
	 * @describe 时间初始化
	 * @author zhoumi
	 * @return
	 * @throws Exception 
	 */
	public ActionForward zxdksjcsh(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		JsspZdsService service=new JsspZdsService();
		boolean blog=service.zxdksjcsh();
		request.setAttribute("resultCsh", blog);
		return new ActionForward("/jsspZds.do?method=sqsjSz&doType=query", false);
	}
	
	
	/**
	 * 单个设置
	 * @throws Exception 
	 */
	public ActionForward zxdksjEdit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		
		String pkValue=request.getParameter("pkValue");
		String doType=request.getParameter("doType");
		String tableName="rcsw_jssp_sjsz";
		String viewName="view_rcsw_jssp_sjsz";
		if("oneUpdate".equalsIgnoreCase(doType)){
			this.updateOperation(request, tableName);
		}
		this.selectPageDataByOne(request, tableName, viewName, pkValue);
		request.setAttribute("pkValue", pkValue);
		return mapping.findForward("zxdksjEdit");
	}

	/**
	 * @describe 批量设置
	 * @return
	 * @throws Exception 
	 */
	public ActionForward zxdksjPlsz(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		
		JsspZdsForm zdsForm=(JsspZdsForm)form;
		String kssj=request.getParameter("kssj");
		String jssj=request.getParameter("jssj");
		String tableName="rcsw_jssp_sjsz";
		String doType=request.getParameter("doType");
		if("plmodi".equalsIgnoreCase(doType)){
			
			HashMap<String,String>valueMap=new HashMap<String,String>();
			valueMap.put("sqkssj",kssj);
			valueMap.put("sqjssj",jssj);
			HashMap<String, String[]> primaryMap = getValueArrayMap(request, PRIFIX_PRIMARY_KEY);
			this.auditingBatchOperation(request, primaryMap, valueMap, tableName);
		}
		FormModleCommon.setNjXyZyBjListForFdyBzr(request);
		return new ActionForward("/jsspZds.do?method=sqsjSz&doType=query",false);
	}
}