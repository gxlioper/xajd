/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package xgxt.xljk.zxzx.action;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import xgxt.action.Base;
import xgxt.daoActionLogic.StandardOperation;
import xgxt.utils.String.StringUtils;
import xgxt.xljk.lrh_Util.util.lrh_commen_util;
import xgxt.xljk.zxzx.form.xljk_zxszy_Form;
import xgxt.xljk.zxzx.util.xljk_dmwh_util;

/**
 * MyEclipse Struts Creation date: 08-17-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class xljk_zxzx_dmwhAtion extends Action {

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		xljk_zxszy_Form myform = new xljk_zxszy_Form();
		HttpSession session = request.getSession();
		String act = request.getParameter("act");
		String doType = request.getParameter("doType");
		ActionForward myActFwd = null;
		try {
			Base.chkSessionTimeOut(session);
			if (session == null) {
				request.setAttribute("errMsg", "sadfsdf");
				return mapping.findForward("false");
			}
			// String userName=session.getAttribute("userName").toString();
			// String userDep=session.getAttribute("userDep").toString();
			// String
			// userNameReal=session.getAttribute("userNameReal").toString();
			// String userOnLine=session.getAttribute("userOnLine").toString();
			if (act.equals("xljk_zxzx_dmwh")) {
				if (StringUtils.isNotNull(doType)) {
					if (doType.equals("dd_add")) { // 增加地段
						myActFwd = dd_add(mapping, form, request, response);
					} else if (doType.equals("dd_modi")) {
						myActFwd = dd_modi(mapping, form, request, response);
					} else if (doType.equals("dd_del")) { // 删除地段
						myActFwd = dd_del(mapping, form, request, response);
					} else if (doType.equals("sjd_add")) { // 时间段增加
						myActFwd = sjd_add(mapping, form, request, response);
					} else if (doType.equals("sjd_modi")) {
						myActFwd = sjd_modi(mapping, form, request, response);
					} else if (doType.equals("sjd_del")) { // 时间段删除
						myActFwd = sjd_del(mapping, form, request, response);
					} else if (doType.equals("jyxs_add")
							|| doType.equals("jyxs_add_be")
							|| doType.equals("jyxs_modi")
							|| doType.equals("jyxs_del")
							|| doType.equals("jyxs_view")) {
						myActFwd = jyxs_wh(mapping, form, request, response);
					}
				} else {
					myActFwd = index_to_jsp(mapping, form, request, response);
				}
			}
			return myActFwd;
		} catch (Exception e) {
			e.printStackTrace();
			myform.setErrMsg("数据连接中断，请重新登陆！");
			return new ActionForward("/login.jsp", false);
		}
	}

	private ActionForward jyxs_wh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// doType add/modi/del/view
		// HttpSession session = request.getSession();
		// String userName = session.getAttribute("userName").toString();
		xljk_zxszy_Form myform = (xljk_zxszy_Form) form;
		myform.do_YJXs_GBK();
		lrh_commen_util service = new lrh_commen_util(request);
		// boolean writeFlag = service.checkUsrPower(userName);
		// request.setAttribute("writeAble", writeFlag == false ? "no" : "yes");
		String doType = myform.getDoType();
		String pk = request.getParameter("xn_id"); // get primary key
		String dmmc = myform.getDmmc();
		if ("jyxs_view".equals(doType)) {
			HashMap<String, String> jyxsInfo = service.doJyxsOneRs(pk, doType,
					dmmc);
			myform.setDmh(jyxsInfo.get("dmh"));
			myform.setDmmc(jyxsInfo.get("dmmc"));
		} else if ("jyxs_add_be".equals(doType)) {
		} else {
			if ("jyxs_add".equals(doType) || "jyxs_modi".equals(doType)) {
				pk = myform.getDmh();
			}
			request.setAttribute("ok", setResult(Boolean.valueOf(service
					.doJyxsOneRs(pk, doType, dmmc).get("result"))));
			if ("jyxs_del".equals(doType)) {
				request.setAttribute("delete", request.getAttribute("ok").toString());
				return index_to_jsp(mapping, form, request, response);
			}
		}
		request.setAttribute("rs", myform);
		return mapping.findForward("jyxs_queryOne");
	}

	private ActionForward index_to_jsp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		String userName = session.getAttribute("userName").toString();
		xljk_zxszy_Form myform = new xljk_zxszy_Form();
		lrh_commen_util commen_util = new lrh_commen_util(request);
		boolean writeFlag = commen_util.checkUsrPower(userName);
		request.setAttribute("writeAble", writeFlag == false ? "no" : "yes");
		String ss = request.getParameter("tname");
		if (StringUtils.isNull(ss)) {
			ss = "zxszy_sjd";
		}
		myform.setSs(ss);
		List rs = commen_util.get_dmwhb_dmList2(ss);
		String rsNum = String.valueOf(rs.size());
		String[] zdm = { "DMH", "DMMC" };
		List topTr = commen_util.Get_Table_Title("xljk_dmwhb", zdm);
		request.setAttribute("rs", rs);
		request.setAttribute("rsNum", rsNum);
		request.setAttribute("topTr", topTr);
		request.setAttribute("form", myform);
		request.setAttribute("tips", "数据维护");
		return mapping.findForward("index_to_jsp");
	}

	private ActionForward sjd_add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		xljk_zxszy_Form myform = (xljk_zxszy_Form) form;
		lrh_commen_util commen_util = new lrh_commen_util(request);
		String add_flag = request.getParameter("add_flag");
		if (StringUtils.isNotNull(add_flag)) {
			String sjd = myform.getHour1() + ":" + myform.getMinutes1() + "-"
					+ myform.getHour2() + ":" + myform.getMinutes2();
			myform.setSjd(sjd);
			String message = commen_util.xljk_dmwhb_add(myform.getSjd_dm(),
					myform.getSjd(), "zxszy_sjd");
			request.setAttribute("message", message);
		}
		return mapping.findForward("sjd_add");
	}

	private ActionForward sjd_modi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		xljk_zxszy_Form myform = (xljk_zxszy_Form) form;
		xljk_dmwh_util myutil = new xljk_dmwh_util();
		myutil.xljk_dmwh_util1(request);
		String xn_id = request.getParameter("xn_id");
		String modi_flag = request.getParameter("modi_flag");
		myform.setZY_XN_ID(xn_id);
		if (!StringUtils.isNull(modi_flag)) {
			String message = myutil.modi_dmwhb_sjdwh(myform);
			request.setAttribute("message", message);
		} else {
			myform = myutil.get_dmwhb_sjdwh(myform);
		}
		return mapping.findForward("sjd_modi");
	}

	private ActionForward sjd_del(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		String userName = session.getAttribute("userName").toString();
		xljk_zxszy_Form myform = (xljk_zxszy_Form) form;
		lrh_commen_util commen_util = new lrh_commen_util(request);
		xljk_dmwh_util myutil = new xljk_dmwh_util();
		myutil.xljk_dmwh_util1(request);
		String xn_id = request.getParameter("xn_id");
		myform.setZY_XN_ID(xn_id);
		String message = myutil.del_dmwhb_sjdwh(myform);
		request.setAttribute("message", message);
		boolean writeFlag = commen_util.checkUsrPower(userName);
		request.setAttribute("writeAble", writeFlag == false ? "no" : "yes");
		String ss = request.getParameter("tname");
		if (ss != null && !ss.equalsIgnoreCase("")) {
			myform.setSs(ss);
			List rs = commen_util.get_dmwhb_dmList2(ss);
			String rsNum = String.valueOf(rs.size());
			String[] zdm = { "DMH", "DMMC" };
			List topTr = commen_util.Get_Table_Title("xljk_dmwhb", zdm);
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rsNum);
			request.setAttribute("topTr", topTr);
		}
		request.setAttribute("form", myform);
		request.setAttribute("tips", "数据维护");
		return mapping.findForward("index_to_jsp");
	}

	private ActionForward dd_add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		xljk_zxszy_Form myform = (xljk_zxszy_Form) form;
		myform.deal_gbk();
		lrh_commen_util commen_util = new lrh_commen_util(request);
		String add_flag = request.getParameter("add_flag"); // 如果不为空，说明已经填写过信息
		if (!StringUtils.isNull(add_flag)) {
			String message = commen_util.xljk_dmwhb_add(myform.getDd_dm(),
					myform.getDd2(), "zxszy_dd");
			request.setAttribute("message", message);
		}
		return mapping.findForward("dd_add");
	}

	private ActionForward dd_modi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		xljk_zxszy_Form myform = (xljk_zxszy_Form) form;
		myform.deal_gbk();
		xljk_dmwh_util myutil = new xljk_dmwh_util();
		myutil.xljk_dmwh_util1(request);
		String modi_flag = request.getParameter("modi_flag");
		if (StringUtils.isNotNull(modi_flag)) {
			String message = myutil.modi_dmwhb_ddwh(myform);
			request.setAttribute("message", message);
		} else {
			String xn_id = request.getParameter("xn_id");
			myform.setZY_XN_ID(xn_id);
			myform.setZY_XN_ID2(xn_id);
			myform = myutil.get_dmwhb_ddwh(myform);
		}
		return mapping.findForward("dd_modi");
	}

	private ActionForward dd_del(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		String userName = session.getAttribute("userName").toString();
		xljk_zxszy_Form myform = (xljk_zxszy_Form) form;
		lrh_commen_util commen_util = new lrh_commen_util(request);
		String xn_id = request.getParameter("xn_id");
		myform.setZY_XN_ID(xn_id);
		boolean judge = false;
		judge = StandardOperation.delete("xljk_dmwhb", "xn_id", xn_id, request);
		request.setAttribute("delete", judge == false ? "no" : "ok");
		boolean writeFlag = commen_util.checkUsrPower(userName);
		request.setAttribute("writeAble", writeFlag == false ? "no" : "yes");
		String ss = request.getParameter("tname");
		if (ss != null && !ss.equalsIgnoreCase("")) {
			myform.setSs(ss);
			List rs = commen_util.get_dmwhb_dmList2(ss);
			String rsNum = String.valueOf(rs.size());
			String[] zdm = { "DMH", "DMMC" };
			List topTr = commen_util.Get_Table_Title("xljk_dmwhb", zdm);
			request.setAttribute("rs", rs);
			request.setAttribute("rsNum", rsNum);
			request.setAttribute("topTr", topTr);
		}
		request.setAttribute("form", myform);
		request.setAttribute("tips", "数据维护");
		return mapping.findForward("index_to_jsp");
	}

	/** ************************************************************************ */
	private String setResult(boolean res) {
		return res == true ? "ok" : "no";
	}

}