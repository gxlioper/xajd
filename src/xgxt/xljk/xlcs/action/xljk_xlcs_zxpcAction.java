/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package xgxt.xljk.xlcs.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import common.Globals;

import xgxt.action.Base;
import xgxt.daoActionLogic.StandardOperation;
import xgxt.xljk.xlcs.form.xilk_zxpc_form;
import xgxt.xljk.xlcs.util.*;

import java.text.SimpleDateFormat;
import java.util.*;
/** 
 * MyEclipse Struts
 * Creation date: 07-25-2007
 * 
 * XDoclet definition:
 * @struts.action path="/xljk_xlcs_zxpc" name="xilk_zxpc_form" scope="request" validate="true"
 */
public class xljk_xlcs_zxpcAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		xilk_zxpc_form xilk_zxpc_form = (xilk_zxpc_form) form;// TODO Auto-generated method stub
		try {
		    int i = Base.chkTimeOut(request.getSession());
		    if (i <= 2) {
		    xilk_zxpc_form.setErrMsg("登陆超时，请重新登陆！");
			return new ActionForward("/login.jsp", false);
		    }

		    HttpSession session = request.getSession();
		    if (session == null) {
			request.setAttribute("errMsg", "sadfsdf");
			return mapping.findForward("false");
		    } 
		
		ActionForward myActFwd = null;
		String act = request.getParameter("act");
		String doType=request.getParameter("doType");

		if (act.equals("zxpc")) {
			if(doType!=null&&!doType.equalsIgnoreCase("")){
				if(doType.equals("sj_search")){
					myActFwd = sj_search(mapping,form,request,response);
				}else if(doType.equals("sj_view")){
					myActFwd = sj_view(mapping,form,request,response);
				}else if(doType.equals("create_testPaper")){  //显示试卷的试题
					myActFwd = create_testPaper(mapping,form,request,response);
				}else if(doType.equals("submit_testPaper")){
					myActFwd = submit_testPaper(mapping,form,request,response);
				}else if(doType.equals("stu_check")){   //学生的用户名和密码验证
					myActFwd = stu_check(mapping,form,request,response);
				}else if(doType.equalsIgnoreCase("getstOneByOne")){
					myActFwd = getstOneByOne(mapping,form,request,response);//逐个显示试题的信息[自评试卷]
				}else if(doType.equalsIgnoreCase("getstOneByOne_xljk")){
					myActFwd = getstOneByOne_xljk(mapping,form,request,response);//逐个显示试题的信息[心理健康自评试卷]
				}
			}
			else{
				myActFwd = index_to_jsp(mapping,form,request,response);
			}
		}
		
		return myActFwd;
		}
		catch(Exception e){
			e.printStackTrace();
			xilk_zxpc_form.setErrMsg("数据连接中断，请重新登陆！");
	    	return new ActionForward("/login.jsp", false);
		}		
	}
	
	private ActionForward index_to_jsp(ActionMapping mapping, ActionForm form,
    	    HttpServletRequest request, HttpServletResponse response)
    	    throws Exception {
//			xilk_zxpc_form myform = (xilk_zxpc_form) form;
			xljk_xlcs_zxpc_util zxpc_util= new xljk_xlcs_zxpc_util();
//			String act=request.getParameter("act");
			List sjList=zxpc_util.zxpc_sjst_getsjList();
			request.setAttribute("sjList", sjList);
			request.setAttribute("writeAble", "yes");
			return mapping.findForward("index_to_jsp");
	}
	
	private ActionForward sj_search(ActionMapping mapping, ActionForm form,
    	    HttpServletRequest request, HttpServletResponse response)
    	    throws Exception {
			xilk_zxpc_form zxpcform = (xilk_zxpc_form) form;
			xljk_xlcs_zxpc_util zxpc_util= new xljk_xlcs_zxpc_util();
//			xljk_XlcsTkwh_util tkwh_util= new xljk_XlcsTkwh_util();
			List li=zxpc_util.zxpc_sj_search(zxpcform);
			String tableName="SJB";
			String [] zdm={"SJLSH","SJM","SJXSBJ","SJXD","JRSJ"};
			List topTr=zxpc_util.Get_Table_Title(tableName, zdm);
			String rsNum=String.valueOf(li.size());
			List sjList=zxpc_util.zxpc_sjst_getsjList();
			request.setAttribute("writeAble", "yes");
			request.setAttribute("sjList", sjList);
			request.setAttribute("rs", li);
			request.setAttribute("rsNum", rsNum);
			request.setAttribute("topTr", topTr);
			return mapping.findForward("index_to_jsp");
	}
	
	private ActionForward sj_view(ActionMapping mapping, ActionForm form,
    	    HttpServletRequest request, HttpServletResponse response)
    	    throws Exception {
			xilk_zxpc_form zxpcform = (xilk_zxpc_form) form;
//			xljk_xlcs_tkwhAction tkwhform=new xljk_xlcs_tkwhAction();
			xljk_xlcs_zxpc_util zxpc_util= new xljk_xlcs_zxpc_util();
//			xljk_XlcsTkwh_util tkwh_util= new xljk_XlcsTkwh_util();
			String sjlsh=request.getParameter("sjlsh");
			zxpcform.setSjlsh(sjlsh);
			zxpcform.deal_gbk();
			zxpcform=zxpc_util.tkwh_findBySjlsh(zxpcform);
			request.setAttribute("rs", zxpcform);
			return mapping.findForward("sj_view");
	}
	
	private ActionForward create_testPaper(ActionMapping mapping, ActionForm form,
    	    HttpServletRequest request, HttpServletResponse response)
    	    throws Exception {
			//HttpSession session = request.getSession();
			xilk_zxpc_form zxpcform = (xilk_zxpc_form) form;
			xljk_xlcs_zxpc_util zxpc_util= new xljk_xlcs_zxpc_util();
			zxpc_util.setRequest(request);
			xilk_zxpc_form sjinfo_form =new xilk_zxpc_form();
			String sjlsh=request.getParameter("sjlsh");
			//String xh=request.getParameter("xh");
			String xh = request.getSession().getAttribute("userName").toString();
			zxpcform.setXh(xh);
			zxpcform.setSjlsh(sjlsh);
			String stflag = request.getParameter("stflag");
			if(stflag != null && stflag.equals("1")){
				//个性自评试卷 不用维护
				sjlsh = Base.isNull(sjlsh)?"":sjlsh.trim();
				String sjsm = zxpc_util.get_sjsmBy_sjlsh(sjlsh);
				request.setAttribute("sjm", zxpc_util.get_sjmcBy_sjlsh(sjlsh));
				request.setAttribute("sjsm", Base.isNull(sjsm)?"":sjsm);
				request.setAttribute("sjlsh", sjlsh);
				request.setAttribute("stxh", "1");
				return mapping.findForward("test_gxzcsj");
			}
			sjinfo_form=zxpc_util.tkwh_findBySjlsh(zxpcform);
			request.setAttribute("sjinfo",sjinfo_form);
			request.setAttribute("sjinfoList",zxpc_util.zxpc_getsjinfoList(zxpcform));
			request.setAttribute("total", zxpc_util.zxpc_getTotalStNum(zxpcform));
			request.setAttribute("stList", zxpc_util.zxpc_getStList(zxpcform));
			request.setAttribute("xxStr", zxpc_util.zxpc_getXxstr(zxpcform));
			request.setAttribute("rs", zxpcform);
			SimpleDateFormat sf = new SimpleDateFormat("yyyy#MM#dd#HH#mm#ss#SSS");
			String dtkssj = sf.format(new Date());
			request.setAttribute("dtkssj", dtkssj);
			request.setAttribute("tj_flag", "no");
			return mapping.findForward("test_paper_create");
	}
	
	private ActionForward stu_check(ActionMapping mapping, ActionForm form,
    	    HttpServletRequest request, HttpServletResponse response)
    	    throws Exception {
		return create_testPaper(mapping,form,request,response);
	/*	
			xilk_zxpc_form zxpcform = (xilk_zxpc_form) form;
			xljk_xlcs_zxpc_util zxpc_util= new xljk_xlcs_zxpc_util();
			zxpc_util.setRequest(request);
			String yanzheng_flag = request.getParameter("yanzheng_flag");
			String sjlsh=request.getParameter("sjlsh");
			request.setAttribute("sjlsh",sjlsh);
			if(yanzheng_flag!=null&&!yanzheng_flag.equalsIgnoreCase("")){
				zxpcform.setXh(request.getParameter("xh"));
				zxpcform.setXssrmm(request.getParameter("xsmm"));
				zxpcform.deal_gbk();
				String message=zxpc_util.xssqyy_check_student(zxpcform);
				request.setAttribute("zxszy_xnid",sjlsh);
				if(message.equals("true")){
					request.setAttribute("message",message);
					request.setAttribute("xh",zxpcform.getXh());
					request.setAttribute("xsmm",zxpcform.getXssrmm());
					return mapping.findForward("check_index");
				}else{
					request.setAttribute("message","log fail");
					request.setAttribute("xh",zxpcform.getXh());
					request.setAttribute("xsmm",zxpcform.getXssrmm());
					return mapping.findForward("check_index");
				}	
			}else {
				request.setAttribute("xh",zxpcform.getXh());
				request.setAttribute("xsmm",zxpcform.getXssrmm());
				return mapping.findForward("check_index");
			}
	*/		
	}
	
	private ActionForward submit_testPaper(ActionMapping mapping, ActionForm form,
    	    HttpServletRequest request, HttpServletResponse response)
    	    throws Exception {
			xilk_zxpc_form zxpcform = (xilk_zxpc_form) form;
			xljk_xlcs_zxpc_util zxpc_util= new xljk_xlcs_zxpc_util();
			zxpc_util.setRequest(request);
			String selectStr= request.getParameter("xxStr");
			String sjlsh=request.getParameter("sjlsh");
			String dtkssj=request.getParameter("dtkssj");
			String lssj=request.getParameter("lssj");
			String xh=request.getParameter("xh");
			zxpcform.setXh(xh);
			zxpcform.setSjlsh(sjlsh);
			zxpcform.setXxStr(selectStr);
			zxpcform.setDtkssj(dtkssj);
			zxpcform.setLssj(lssj);
			zxpcform.deal_gbk();
			String message=zxpc_util.zxpc_test_record(zxpcform);
			List sjList=zxpc_util.zxpc_sjst_getsjList();
			
			request.setAttribute("sjList", sjList);
			request.setAttribute("writeAble", "yes");
			request.setAttribute("message", message);
			xilk_zxpc_form sjinfo_form =new xilk_zxpc_form();
			zxpcform.setXh(xh);
			zxpcform.setSjlsh(sjlsh);
			sjinfo_form=zxpc_util.tkwh_findBySjlsh(zxpcform);
			request.setAttribute("sjinfo",sjinfo_form);
			request.setAttribute("sjinfoList",zxpc_util.zxpc_getsjinfoList(zxpcform));
			request.setAttribute("total", zxpc_util.zxpc_getTotalStNum(zxpcform));
			request.setAttribute("stList", zxpc_util.zxpc_getStList(zxpcform));
			request.setAttribute("xxStr", zxpc_util.zxpc_getXxstr(zxpcform));
			request.setAttribute("rs", zxpcform);
			SimpleDateFormat sf = new SimpleDateFormat("yyyy#MM#dd#HH#mm#ss#SSS");
			dtkssj = sf.format(new Date());
			request.setAttribute("dtkssj", dtkssj);
			request.setAttribute("tj_flag", "yes");
			return mapping.findForward("test_paper_create");
	}
	private ActionForward getstOneByOne(ActionMapping mapping, ActionForm form,
    	    HttpServletRequest request, HttpServletResponse response)
    	    throws Exception {
		/**
		 * 在第一次显示试卷试题的时候，stxh为１，在request中保存的stxh是2,将stxh为１的试题显示，
		 */
		xljk_xlcs_zxpc_util zxpc_util= new xljk_xlcs_zxpc_util();
		String examNum = request.getParameter("totalNum");
		String sjlsh = request.getParameter("sjlsh");//得到试卷流水号
		String stxhFuture = request.getParameter("stxh");	//试题序号加上１的序号
		String stxh = (Integer.parseInt(stxhFuture) - 1) + "";
		String xh = request.getSession().getAttribute("userName").toString(); //得到学号
		String xxdm = StandardOperation.getXxdm();
		String allstdf = request.getParameter("stdf") == null ? "" : request.getParameter("stdf");
		StringBuffer sb = new StringBuffer();
		sb.append(allstdf);
		if(stxhFuture.equalsIgnoreCase("1")){
			//得到试卷的试题数目 + 1
			examNum = (Integer.parseInt(zxpc_util.getExamTotalNum(sjlsh)) + 1) + "";
			request.setAttribute("stdf", sb);
			if(xxdm.equals(Globals.XXDM_SHGC)){
				if(zxpc_util.isStuAlreadyDid(xh)){
					request.setAttribute("doPaper", "");
					stxhFuture = examNum;
				}
			}else{
				if(zxpc_util.isFinishTest(xh)){
					request.setAttribute("doPaper", "");
					stxhFuture = examNum;
				}
			}
		}else{
			//表明有作答
			String xx = request.getParameter("xx").trim(); //得到作答选项
			if(xxdm.equals(Globals.XXDM_SHGC)){			
				String yx = zxpc_util.judgeYx(stxh);  //得到因素
				String df = zxpc_util.getDf(yx, stxh, xx); //得到分数
				String[] input = new String[]{xh,yx,stxh,df};
				boolean isSaveOk = zxpc_util.saveDf(input);
				if(isSaveOk == false){
					request.setAttribute("saveok", "false");
				}
			}else{
				String stlsh = zxpc_util.getStlsh(sjlsh,stxh);
				String yzdm = zxpc_util.getYz(stlsh);
				String stdf =  zxpc_util.getStdf(stlsh, xx);
				String[] values = new String[]{xh,sjlsh,yzdm,stxh,stdf};
				sb = zxpc_util.dealStrBuff(sb,values);
				request.setAttribute("stdf", sb);
			}		
		}
		if(examNum != null && !examNum.equals("")){
			if(stxhFuture.equalsIgnoreCase(examNum)){
				if(xxdm.equals(Globals.XXDM_SHGC)){
						//开始给学生做总结,有性别之分
						String xb = zxpc_util.getXb(xh);
						List<HashMap<String,String>> py = zxpc_util.getZongJie(xh, xb);
						request.setAttribute("view","yes");
						request.setAttribute("py",py);
				}else{
					if(!zxpc_util.isFinishTest(xh)){
						//开始给学生做总结,有性别之分,保存所有试题得分
						String[] sqls = sb.toString().split("!!SplitSign!!");
						boolean flag  = zxpc_util.dealBatch(sqls);
						if(flag){
							zxpc_util.addYzAndZfs(sjlsh, xh);
						}
					}
					List<HashMap<String,String>> py = zxpc_util.getYzpy(sjlsh, xh);
					HashMap<String,String> zjpy = zxpc_util.getZjpy(sjlsh, xh);
					if(zjpy != null){
						py.add(zjpy);
					}
					if(true){
						zjpy = zxpc_util.getZf_Pjf_Yxxms(sjlsh, xh);
						if(zjpy != null){
							py.add(zjpy);
						}
					}
					request.setAttribute("view","no");
					request.setAttribute("py",py);				
				}			
				return mapping.findForward("test_result_show");
			}
		}		
		request.setAttribute("stxhOld", stxhFuture);
		request.setAttribute("stxh",(Integer.parseInt(stxhFuture) + 1) + "");
		List<HashMap<String,String>> stinfo = zxpc_util.getStInfo(sjlsh, stxhFuture);
		List stMoreInfo = zxpc_util.getstMoreInfo(stinfo.get(0).get("stlsh"));

		//将学生的作答记录保存到表中
		request.setAttribute("totalNum", examNum);
		request.setAttribute("stinfo", stinfo);
		request.setAttribute("stMoreInfo", stMoreInfo);
		request.setAttribute("sjlsh", sjlsh);
		return mapping.findForward("test_onebyone");
	}
	private ActionForward getstOneByOne_xljk(ActionMapping mapping, ActionForm form,
    	    HttpServletRequest request, HttpServletResponse response)
    	    throws Exception {
		/**
		 *  心理健康自评试卷,
		 * 在第一次显示试卷试题的时候，stxh为１，在request中保存的stxh是2,将stxh为１的试题显示，
		 */
		xljk_xlcs_zxpc_util zxpc_util= new xljk_xlcs_zxpc_util();
		String examNum = request.getParameter("totalNum");
		String sjlsh = request.getParameter("sjlsh");//得到试卷流水号
		String stxhFuture = request.getParameter("stxh");	//试题序号加上１的序号
		String stxh = (Integer.parseInt(stxhFuture) - 1) + "";
		String xh = request.getSession().getAttribute("userName").toString(); //得到学号
		if(stxhFuture.equalsIgnoreCase("1")){
			//得到试卷的试题数目 + 1
			examNum = (Integer.parseInt(zxpc_util.getExamTotalNum(sjlsh)) + 1) + "";
		}else{
			//表明有作答
			String xx = request.getParameter("xx").trim(); //得到作答选项的[分数]
			String yz = zxpc_util.getYzById(stxh);  //得到因子类型
			String[] input = new String[]{xh,stxh,xx,yz};
			//将学生的作答记录保存到表中
			boolean isSaveOk = zxpc_util.save_XljkExam(input);
			if(isSaveOk == false){
				request.setAttribute("saveok", "false");
			}
		}
		if(examNum != null && !examNum.equals("")){
			if(stxhFuture.equalsIgnoreCase(examNum)){
				boolean isSaveOk = zxpc_util.analyse_xjlkByStuId(xh);
				if(isSaveOk == true){
					request.setAttribute("py_xljk","谢谢你的答题!");
				}else{
					request.setAttribute("py_xljk","!!!!!");
				}
				return mapping.findForward("test_result_show");
			}
		}
		request.setAttribute("stxhOld", stxhFuture);
		request.setAttribute("stxh",(Integer.parseInt(stxhFuture) + 1) + "");
		List<HashMap<String,String>> stinfo = zxpc_util.getStInfo(sjlsh, stxhFuture);
		request.setAttribute("totalNum", examNum);
		request.setAttribute("stinfo", stinfo);
		request.setAttribute("sjlsh", sjlsh);
		return mapping.findForward("test_onebyone_xljk");
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}