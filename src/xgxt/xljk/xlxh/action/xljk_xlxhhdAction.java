/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package xgxt.xljk.xlxh.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import xgxt.action.Base;
import xgxt.utils.FormModleCommon;
import xgxt.xljk.xlxh.Form.xljk_xlxhhd_from;
import xgxt.xljk.xlxh.util.*;

import java.util.*;

/** 
 * MyEclipse Struts
 * Creation date: 07-30-2007
 * 
 * XDoclet definition:
 * @struts.action path="/xljk_xlxhhd" name="xljk_xlxhhd_from" scope="request" validate="true"
 */
public class xljk_xlxhhdAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		xljk_xlxhhd_from xljk_xlxhhd_from = (xljk_xlxhhd_from) form;// TODO Auto-generated method stub

		try {
			int i = Base.chkTimeOut(request.getSession());
			if (i <= 2) {
				xljk_xlxhhd_from.setErrMsg("登陆超时，请重新登陆！");
				return new ActionForward("/login.jsp", false);
			}

			HttpSession session = request.getSession();
			if (session == null) {
				request.setAttribute("errMsg", "sadfsdf");
				return mapping.findForward("false");
			}

			ActionForward myActFwd = null;
			String act = request.getParameter("act");
			String doType = request.getParameter("doType");
			if (act.equals("xljk_xlxhhd")) {
				if (doType != null && !doType.equalsIgnoreCase("")) {
					if (doType.equals("xlxhhd_add")) {
						myActFwd = xlxhhd_add(mapping, form, request, response);
					} else if (doType.equals("xlxhhd_search")) {
						myActFwd = xlxhhd_search(mapping, form, request,
								response);
					} else if (doType.equals("xlxhhd_view")) {
						myActFwd = xlxhhd_view(mapping, form, request, response);
					} else if (doType.equals("xlxhhd_modi")) {
						myActFwd = xlxhhd_modi(mapping, form, request, response);
					} else if (doType.equals("xlxhhd_del")) {
						myActFwd = xlxhhd_del(mapping, form, request, response);
					}
				} else {
					myActFwd = index_to_jsp(mapping, form, request, response);
				}
			}
			return myActFwd;
		} catch (Exception e) {
			e.printStackTrace();
			xljk_xlxhhd_from.setErrMsg("数据连接中断，请重新登陆！");
			return new ActionForward("/login.jsp", false);
		}
	}

	private ActionForward index_to_jsp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//		 		xljk_xlxhhd_from xljk_xlxhhd_from = (xljk_xlxhhd_from) form;

		
		request.setAttribute("path", "xljk_xlxhhd.do?act=xljk_xlxhhd");
		FormModleCommon.commonRequestSet(request);
		request.setAttribute("tableName", "xljk_xlxhhd");
		request.setAttribute("realTable", "xljk_xlxhhd");
		return mapping.findForward("index_to_jsp");
	}

	private ActionForward xlxhhd_add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		xljk_xlxhhd_from xljk_xlxhhd_from = (xljk_xlxhhd_from) form;
		XLJK_XLXH_UTIL myutil = new XLJK_XLXH_UTIL();
		myutil.XLJK_XLXH_UTIL1(request);
		xljk_xlxhhd_from.deal_gbk();
		List hdxsList = myutil.xlxhhd_gethdxsList();
		String add_flag = request.getParameter("add_flag");
		String message = "";
		if (add_flag != null && !add_flag.equalsIgnoreCase("")) {
			message = myutil.xlxhhd_add_hd(xljk_xlxhhd_from);
		}
		request.setAttribute("message", message);
		request.setAttribute("hdxsList", hdxsList);
		return mapping.findForward("xlxhhd_add");
	}

	private ActionForward xlxhhd_search(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		xljk_xlxhhd_from xljk_xlxhhd_from = (xljk_xlxhhd_from) form;
		XLJK_XLXH_UTIL myutil = new XLJK_XLXH_UTIL();
		xljk_xlxhhd_from.deal_gbk();
		List li = myutil.xlxhhd_search_hd(xljk_xlxhhd_from);
		String rsNum = String.valueOf(li.size());
		String[] zdm = { "RQ", "ZT", "CYXS", "RS", "HDXS", "ZCR", "XS" };
		List topTr = myutil.Get_Table_Title("xljk_xlxhhd", zdm);
		Object message = request.getAttribute("message");
		try {
			String mes = message.toString();
			if (mes != null && !mes.equalsIgnoreCase("")) {
				request.setAttribute("message", mes);
			}
		} catch (Exception e) {

		}
		
		request.setAttribute("path", "xljk_xlxhhd.do?act=xljk_xlxhhd");
		FormModleCommon.commonRequestSet(request);
		request.setAttribute("tableName", "xljk_xlxhhd");
		request.setAttribute("realTable", "xljk_xlxhhd");
		request.setAttribute("topTr", topTr);
		request.setAttribute("rs", li);
		request.setAttribute("rsNum", rsNum);
		return mapping.findForward("index_to_jsp");
	}

	private ActionForward xlxhhd_view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		xljk_xlxhhd_from xljk_xlxhhd_from = (xljk_xlxhhd_from) form;
		XLJK_XLXH_UTIL myutil = new XLJK_XLXH_UTIL();
		xljk_xlxhhd_from.deal_gbk();
		String xlxhhd_xnid = request.getParameter("xlxhhd_xnid");
		xljk_xlxhhd_from.setXlxhhd_xnid(xlxhhd_xnid);
		xljk_xlxhhd_from = myutil.xlxhhd_view_hd(xljk_xlxhhd_from);
		return mapping.findForward("xlxhhd_view");
	}

	private ActionForward xlxhhd_modi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		xljk_xlxhhd_from xljk_xlxhhd_from = (xljk_xlxhhd_from) form;
		XLJK_XLXH_UTIL myutil = new XLJK_XLXH_UTIL();
		myutil.XLJK_XLXH_UTIL1(request);
		xljk_xlxhhd_from.deal_gbk();
		String modi_flag = request.getParameter("modi_flag");
		String message = "";
		String xlxhhd_xnid = request.getParameter("xlxhhd_xnid");
		xljk_xlxhhd_from.setXlxhhd_xnid(xlxhhd_xnid);
		List hdxsList = myutil.xlxhhd_gethdxsList();
		if (modi_flag != null && !modi_flag.equalsIgnoreCase("")) {
			if (modi_flag.equals("yes")) {
				message = myutil.xlxhhd_modi_hd(xljk_xlxhhd_from);
				request.setAttribute("message", message);
			}
		} else {
			xljk_xlxhhd_from = myutil.xlxhhd_view_hd(xljk_xlxhhd_from);
			String dmh = myutil.xljk_dmwhb_dmzh2(xljk_xlxhhd_from.getHdxs(),
					"xlxhhd_hdxs");
			xljk_xlxhhd_from.setHdxs(dmh);
		}
		request.setAttribute("xlxhhd_xnid", xlxhhd_xnid);
		request.setAttribute("hdxsList", hdxsList);
		return mapping.findForward("xlxhhd_modi");
	}

	private ActionForward xlxhhd_del(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		xljk_xlxhhd_from xljk_xlxhhd_from = (xljk_xlxhhd_from) form;
		XLJK_XLXH_UTIL myutil = new XLJK_XLXH_UTIL();
		myutil.XLJK_XLXH_UTIL1(request);
		xljk_xlxhhd_from.deal_gbk();
		String xlxhhd_xnid = request.getParameter("xlxhhd_xnid");
		xljk_xlxhhd_from.setXlxhhd_xnid(xlxhhd_xnid);
		String message = myutil.xlxhhd_del_hd(xljk_xlxhhd_from);
		request.setAttribute("message", message);
		return this.xlxhhd_search(mapping, form, request, response);
	}

}